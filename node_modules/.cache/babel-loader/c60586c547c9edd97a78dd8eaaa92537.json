{"ast":null,"code":"const getTitleData = (rawdata, date, movieName) => {\n  let titleData = [],\n      filtered = rawdata.filter(data => data.movieNm === movieName);\n\n  if (filtered.length === 0) {\n    return null;\n  }\n\n  filtered.forEach(data => {\n    const rank = data.rank,\n          movieNm = data.movieNm,\n          movieCd = data.movieCd,\n          openDt = data.openDt,\n          salesAmt = data.salesAmt,\n          salesAcc = data.salesAcc,\n          audiCnt = data.audiCnt,\n          audiAcc = data.audiAcc,\n          scrnCnt = data.scrnCnt,\n          showcnt = data.showcnt,\n          date = data.date;\n    const tempObj = {\n      rank,\n      movieNm,\n      movieCd,\n      openDt,\n      salesAmt,\n      salesAcc,\n      audiCnt,\n      audiAcc,\n      scrnCnt,\n      showcnt,\n      date\n    };\n    titleData.push(tempObj);\n  });\n  return titleData;\n};\n\nconst getDefaultData = (data, date, isAttendance = true) => {\n  const title4Attendance = {\n    date,\n    daily: \"관객수\",\n    cumulative: \"누적관객수\",\n    theaters: \"상영관수\",\n    trend: \"\"\n  },\n        title4Income = {\n    date,\n    daily: \"수입\",\n    cumulative: \"누적수입\",\n    theaters: \"상영관수\",\n    trend: \"\"\n  };\n  let defaultData = {\n    title: isAttendance ? title4Attendance : title4Income,\n    daily: [],\n    cumulative: [],\n    theaters: [],\n    trend: null,\n    rawdata: data\n  };\n  let movieName = [],\n      targetMovies = [],\n      rawdata = data,\n      targetData = rawdata.filter(data => data.date === date),\n      dataKey = isAttendance ? 'audiCnt' : 'salesAmt',\n      unit = isAttendance ? '명' : '원'; // 1. daily,\n\n  for (let i = 0; i < 5; i++) {\n    let daily = {\n      movieCode: `daily${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i][dataKey].toLocaleString() + unit\n    },\n        tempObject = {\n      name: targetData[i].movieNm,\n      data: []\n    };\n    defaultData['daily'].push(daily);\n    movieName.push(tempObject);\n    targetMovies.push(targetData[i].movieNm);\n  }\n\n  dataKey = isAttendance ? 'audiAcc' : 'salesAcc'; // 2. cumulative\n\n  targetData.sort((a, b) => b[dataKey] - a[dataKey]);\n\n  for (let i = 0; i < 5; i++) {\n    let cumulative = {\n      movieCode: `cumulative${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i][dataKey].toLocaleString() + unit\n    };\n    defaultData['cumulative'].push(cumulative);\n  } // 3. theaters\n\n\n  targetData.sort((a, b) => b.scrnCnt - a.scrnCnt);\n\n  for (let i = 0; i < 5; i++) {\n    let theaters = {\n      name: targetData[i].movieNm,\n      y: targetData[i].scrnCnt\n    };\n    defaultData['theaters'].push(theaters);\n  } // 4. Trend\n\n\n  defaultData.trend = getTrendData(rawdata, defaultData.daily[0].movieCode, date, isAttendance);\n  defaultData.title.trend = defaultData.trend.title;\n  return defaultData;\n};\n\nconst getTrendData = (rawdata, clicked, date, isAttendance) => {\n  let trendData = null,\n      categories = [],\n      series = [],\n      data = [],\n      filtered = null,\n      targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\n      dataType = clicked.replace(/[0-9]*/g, \"\"),\n      lastIndex = 0,\n      value = '',\n      title = '',\n      releaseDate = ''; // rawdata에서 clicked영화만 추출\n\n  filtered = rawdata.filter(rawdata => rawdata.movieCd === targetMovieCode); // filter를 오늘까지 자름\n\n  lastIndex = filtered.findIndex(filtered => filtered.date === date);\n\n  if (isAttendance) {\n    value = dataType === \"daily\" ? \"audiCnt\" : \"audiAcc\";\n    title = dataType === \"daily\" ? `${filtered[0].movieNm} 일별 관객수` : `${filtered[0].movieNm} 일별 누적관객수`;\n  } else {\n    value = dataType === \"daily\" ? \"salesAmt\" : \"salesAcc\";\n    title = dataType === \"daily\" ? `${filtered[0].movieNm} 일별 수입` : `${filtered[0].movieNm} 일별 누적수입`;\n  } //releaseDate = filtered[0].openDt.replace(/-/g, '');\n\n\n  for (let i = 0; i <= lastIndex; i++) {\n    let formattedDate = getTrendDate(filtered[i].date),\n        //seriesData = ( filtered[i].date !== releaseDate ) ? {y: filtered[i][value] } :  { y: filtered[i][value], id: 'annotation' };\n    seriesData = filtered[i][value];\n    categories.push(formattedDate); // x축 날짜 데이터 삽입\n\n    data.push(seriesData);\n    debugger;\n  } // trend data구조에 맞게 처리\n\n\n  series.push({\n    name: filtered[0].movieNm,\n    data\n  });\n  trendData = {\n    categories,\n    series,\n    title\n  }; // return trend data\n\n  return trendData;\n};\n\nconst getTrendDate = date => {\n  // 1. date포맷 변경: \"20190101\" -> \"2019-01-01\" \n  let year = date.substr(0, 4),\n      month = date.substr(4, 2),\n      day = date.substr(6, 5),\n      formattedDate = `${year}-${month}-${day}`; // 2. Date 객체 생성\n\n  let dateObject = new Date(formattedDate); // 3. getDay로 요일 생성\n\n  let weekday = dateObject.getDay();\n  let weekdayArray = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"]; // 4. 요일 + 달.일 형식으로 변경\n\n  let result = `${month}.${day} <br /> ${weekdayArray[weekday]}`;\n  return result;\n};\n\nconst getDate = date => {\n  //let date = new Date();\n  //date.setDate(date.getDate() + i);\n  let isNow = date.getFullYear() === 2020,\n      month = '' + (date.getMonth() + 1),\n      day = '' + date.getDate(),\n      year = isNow ? date.getFullYear() - 1 : date.getFullYear();\n\n  if (month.length < 2) {\n    month = '0' + month;\n  }\n\n  if (day.length < 2) {\n    day = '0' + day;\n  }\n\n  return [year, month, day].join('');\n};\n\nconst getSearchResultData = movieName => {\n  console.log('dataprocessing', movieName);\n};\n\nexport default getDefaultData;\nexport { getTrendData, getDate, getSearchResultData, getTitleData };","map":{"version":3,"sources":["D:/VisualStudioCode/dashboard/src/common/dataProcessing.js"],"names":["getTitleData","rawdata","date","movieName","titleData","filtered","filter","data","movieNm","length","forEach","rank","movieCd","openDt","salesAmt","salesAcc","audiCnt","audiAcc","scrnCnt","showcnt","tempObj","push","getDefaultData","isAttendance","title4Attendance","daily","cumulative","theaters","trend","title4Income","defaultData","title","targetMovies","targetData","dataKey","unit","i","movieCode","value","toLocaleString","tempObject","name","sort","a","b","y","getTrendData","clicked","trendData","categories","series","targetMovieCode","replace","dataType","lastIndex","releaseDate","findIndex","formattedDate","getTrendDate","seriesData","year","substr","month","day","dateObject","Date","weekday","getDay","weekdayArray","result","getDate","isNow","getFullYear","getMonth","join","getSearchResultData","console","log"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CAACC,OAAD,EAAUC,IAAV,EAAgBC,SAAhB,KAA8B;AAC/C,MAAIC,SAAS,GAAG,EAAhB;AAAA,MACIC,QAAQ,GAAGJ,OAAO,CAACK,MAAR,CAAgBC,IAAI,IAAIA,IAAI,CAACC,OAAL,KAAiBL,SAAzC,CADf;;AAEA,MAAKE,QAAQ,CAACI,MAAT,KAAoB,CAAzB,EAA6B;AACzB,WAAO,IAAP;AACH;;AAEDJ,EAAAA,QAAQ,CAACK,OAAT,CAAkBH,IAAI,IAAI;AAAA,UACdI,IADc,GACmFJ,IADnF,CACdI,IADc;AAAA,UACRH,OADQ,GACmFD,IADnF,CACRC,OADQ;AAAA,UACCI,OADD,GACmFL,IADnF,CACCK,OADD;AAAA,UACUC,MADV,GACmFN,IADnF,CACUM,MADV;AAAA,UACkBC,QADlB,GACmFP,IADnF,CACkBO,QADlB;AAAA,UAC4BC,QAD5B,GACmFR,IADnF,CAC4BQ,QAD5B;AAAA,UACsCC,OADtC,GACmFT,IADnF,CACsCS,OADtC;AAAA,UAC+CC,OAD/C,GACmFV,IADnF,CAC+CU,OAD/C;AAAA,UACwDC,OADxD,GACmFX,IADnF,CACwDW,OADxD;AAAA,UACiEC,OADjE,GACmFZ,IADnF,CACiEY,OADjE;AAAA,UAC0EjB,IAD1E,GACmFK,IADnF,CAC0EL,IAD1E;AAEtB,UAAMkB,OAAO,GAAG;AAAET,MAAAA,IAAF;AAAQH,MAAAA,OAAR;AAAiBI,MAAAA,OAAjB;AAA0BC,MAAAA,MAA1B;AAAkCC,MAAAA,QAAlC;AAA4CC,MAAAA,QAA5C;AAAsDC,MAAAA,OAAtD;AAA+DC,MAAAA,OAA/D;AAAwEC,MAAAA,OAAxE;AAAiFC,MAAAA,OAAjF;AAA0FjB,MAAAA;AAA1F,KAAhB;AACAE,IAAAA,SAAS,CAACiB,IAAV,CAAeD,OAAf;AACH,GAJD;AAMA,SAAOhB,SAAP;AACH,CAdD;;AAgBA,MAAMkB,cAAc,GAAG,CAACf,IAAD,EAAOL,IAAP,EAAaqB,YAAY,GAAG,IAA5B,KAAqC;AACxD,QAAMC,gBAAgB,GAAG;AAAEtB,IAAAA,IAAF;AAAQuB,IAAAA,KAAK,EAAE,KAAf;AAAsBC,IAAAA,UAAU,EAAE,OAAlC;AAA2CC,IAAAA,QAAQ,EAAE,MAArD;AAA6DC,IAAAA,KAAK,EAAE;AAApE,GAAzB;AAAA,QACMC,YAAY,GAAG;AAAE3B,IAAAA,IAAF;AAAQuB,IAAAA,KAAK,EAAE,IAAf;AAAqBC,IAAAA,UAAU,EAAE,MAAjC;AAAyCC,IAAAA,QAAQ,EAAE,MAAnD;AAA2DC,IAAAA,KAAK,EAAE;AAAlE,GADrB;AAGA,MAAIE,WAAW,GAAG;AACdC,IAAAA,KAAK,EAAER,YAAY,GAAGC,gBAAH,GAAsBK,YAD3B;AAEdJ,IAAAA,KAAK,EAAE,EAFO;AAGdC,IAAAA,UAAU,EAAE,EAHE;AAIdC,IAAAA,QAAQ,EAAE,EAJI;AAKdC,IAAAA,KAAK,EAAE,IALO;AAMd3B,IAAAA,OAAO,EAAEM;AANK,GAAlB;AASA,MAAIJ,SAAS,GAAG,EAAhB;AAAA,MACI6B,YAAY,GAAG,EADnB;AAAA,MAEI/B,OAAO,GAAGM,IAFd;AAAA,MAGI0B,UAAU,GAAGhC,OAAO,CAACK,MAAR,CAAgBC,IAAI,IAAIA,IAAI,CAACL,IAAL,KAAcA,IAAtC,CAHjB;AAAA,MAIIgC,OAAO,GAAGX,YAAY,GAAG,SAAH,GAAe,UAJzC;AAAA,MAKIY,IAAI,GAAGZ,YAAY,GAAG,GAAH,GAAS,GALhC,CAbwD,CAoBxD;;AACA,OAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA6B;AACzB,QAAIX,KAAK,GAAG;AAAEY,MAAAA,SAAS,EAAG,QAAOJ,UAAU,CAACG,CAAD,CAAV,CAAcxB,OAAQ,EAA3C;AAA8CT,MAAAA,SAAS,EAAE8B,UAAU,CAACG,CAAD,CAAV,CAAc5B,OAAvE;AAAgF8B,MAAAA,KAAK,EAAEL,UAAU,CAACG,CAAD,CAAV,CAAcF,OAAd,EAAuBK,cAAvB,KAA0CJ;AAAjI,KAAZ;AAAA,QACIK,UAAU,GAAG;AAAEC,MAAAA,IAAI,EAAER,UAAU,CAACG,CAAD,CAAV,CAAc5B,OAAtB;AAA+BD,MAAAA,IAAI,EAAE;AAArC,KADjB;AAGAuB,IAAAA,WAAW,CAAC,OAAD,CAAX,CAAqBT,IAArB,CAA0BI,KAA1B;AAEAtB,IAAAA,SAAS,CAACkB,IAAV,CAAemB,UAAf;AACAR,IAAAA,YAAY,CAACX,IAAb,CAAkBY,UAAU,CAACG,CAAD,CAAV,CAAc5B,OAAhC;AACH;;AACD0B,EAAAA,OAAO,GAAGX,YAAY,GAAG,SAAH,GAAe,UAArC,CA9BwD,CA+BxD;;AACAU,EAAAA,UAAU,CAACS,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACV,OAAD,CAAD,GAAaS,CAAC,CAACT,OAAD,CAAxC;;AACA,OAAM,IAAIE,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA8B;AAC1B,QAAIV,UAAU,GAAG;AAAEW,MAAAA,SAAS,EAAG,aAAYJ,UAAU,CAACG,CAAD,CAAV,CAAcxB,OAAQ,EAAhD;AAAmDT,MAAAA,SAAS,EAAE8B,UAAU,CAACG,CAAD,CAAV,CAAc5B,OAA5E;AAAqF8B,MAAAA,KAAK,EAAEL,UAAU,CAACG,CAAD,CAAV,CAAcF,OAAd,EAAuBK,cAAvB,KAA0CJ;AAAtI,KAAjB;AACAL,IAAAA,WAAW,CAAC,YAAD,CAAX,CAA0BT,IAA1B,CAA+BK,UAA/B;AACH,GApCuD,CAsCxD;;;AACAO,EAAAA,UAAU,CAACS,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAAC1B,OAAF,GAAYyB,CAAC,CAACzB,OAAxC;;AACA,OAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA6B;AACzB,QAAIT,QAAQ,GAAG;AAAEc,MAAAA,IAAI,EAAER,UAAU,CAACG,CAAD,CAAV,CAAc5B,OAAtB;AAA+BqC,MAAAA,CAAC,EAAEZ,UAAU,CAACG,CAAD,CAAV,CAAclB;AAAhD,KAAf;AACAY,IAAAA,WAAW,CAAC,UAAD,CAAX,CAAwBT,IAAxB,CAA6BM,QAA7B;AACH,GA3CuD,CA6CxD;;;AACAG,EAAAA,WAAW,CAACF,KAAZ,GAAoBkB,YAAY,CAAC7C,OAAD,EAAU6B,WAAW,CAACL,KAAZ,CAAkB,CAAlB,EAAqBY,SAA/B,EAA0CnC,IAA1C,EAAgDqB,YAAhD,CAAhC;AACAO,EAAAA,WAAW,CAACC,KAAZ,CAAkBH,KAAlB,GAA0BE,WAAW,CAACF,KAAZ,CAAkBG,KAA5C;AAEA,SAAOD,WAAP;AACH,CAlDD;;AAoDA,MAAMgB,YAAY,GAAG,CAAC7C,OAAD,EAAU8C,OAAV,EAAmB7C,IAAnB,EAAyBqB,YAAzB,KAA0C;AAC3D,MAAIyB,SAAS,GAAG,IAAhB;AAAA,MACIC,UAAU,GAAG,EADjB;AAAA,MAEIC,MAAM,GAAG,EAFb;AAAA,MAGI3C,IAAI,GAAG,EAHX;AAAA,MAIIF,QAAQ,GAAG,IAJf;AAAA,MAKI8C,eAAe,GAAGJ,OAAO,CAACK,OAAR,CAAgB,mBAAhB,EAAqC,EAArC,CALtB;AAAA,MAMIC,QAAQ,GAAGN,OAAO,CAACK,OAAR,CAAgB,SAAhB,EAA2B,EAA3B,CANf;AAAA,MAOIE,SAAS,GAAG,CAPhB;AAAA,MAQIhB,KAAK,GAAG,EARZ;AAAA,MASIP,KAAK,GAAG,EATZ;AAAA,MAUIwB,WAAW,GAAG,EAVlB,CAD2D,CAa3D;;AACAlD,EAAAA,QAAQ,GAAGJ,OAAO,CAACK,MAAR,CAAgBL,OAAO,IAAIA,OAAO,CAACW,OAAR,KAAoBuC,eAA/C,CAAX,CAd2D,CAgB3D;;AACAG,EAAAA,SAAS,GAAGjD,QAAQ,CAACmD,SAAT,CAAoBnD,QAAQ,IAAIA,QAAQ,CAACH,IAAT,KAAkBA,IAAlD,CAAZ;;AACA,MAAKqB,YAAL,EAAoB;AAChBe,IAAAA,KAAK,GAAGe,QAAQ,KAAK,OAAb,GAAuB,SAAvB,GAAmC,SAA3C;AACAtB,IAAAA,KAAK,GAAGsB,QAAQ,KAAK,OAAb,GAAwB,GAAEhD,QAAQ,CAAC,CAAD,CAAR,CAAYG,OAAQ,SAA9C,GAA0D,GAAEH,QAAQ,CAAC,CAAD,CAAR,CAAYG,OAAQ,WAAxF;AACH,GAHD,MAGO;AACH8B,IAAAA,KAAK,GAAGe,QAAQ,KAAK,OAAb,GAAuB,UAAvB,GAAoC,UAA5C;AACAtB,IAAAA,KAAK,GAAGsB,QAAQ,KAAK,OAAb,GAAwB,GAAEhD,QAAQ,CAAC,CAAD,CAAR,CAAYG,OAAQ,QAA9C,GAAyD,GAAEH,QAAQ,CAAC,CAAD,CAAR,CAAYG,OAAQ,UAAvF;AACH,GAxB0D,CA0B3D;;;AAEA,OAAI,IAAI4B,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAIkB,SAApB,EAA+BlB,CAAC,EAAhC,EAAoC;AAChC,QAAIqB,aAAa,GAAGC,YAAY,CAACrD,QAAQ,CAAC+B,CAAD,CAAR,CAAYlC,IAAb,CAAhC;AAAA,QACI;AACAyD,IAAAA,UAAU,GAAGtD,QAAQ,CAAC+B,CAAD,CAAR,CAAYE,KAAZ,CAFjB;AAIAW,IAAAA,UAAU,CAAC5B,IAAX,CAAgBoC,aAAhB,EALgC,CAKA;;AAChClD,IAAAA,IAAI,CAACc,IAAL,CAAUsC,UAAV;AACA;AACH,GApC0D,CAsC3D;;;AACAT,EAAAA,MAAM,CAAC7B,IAAP,CAAY;AAAEoB,IAAAA,IAAI,EAAEpC,QAAQ,CAAC,CAAD,CAAR,CAAYG,OAApB;AAA6BD,IAAAA;AAA7B,GAAZ;AACAyC,EAAAA,SAAS,GAAG;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBnB,IAAAA;AAAtB,GAAZ,CAxC2D,CA2C3D;;AACA,SAAOiB,SAAP;AACH,CA7CD;;AA+CA,MAAMU,YAAY,GAAIxD,IAAD,IAAU;AAC3B;AACA,MAAI0D,IAAI,GAAG1D,IAAI,CAAC2D,MAAL,CAAY,CAAZ,EAAe,CAAf,CAAX;AAAA,MACIC,KAAK,GAAG5D,IAAI,CAAC2D,MAAL,CAAY,CAAZ,EAAe,CAAf,CADZ;AAAA,MAEIE,GAAG,GAAG7D,IAAI,CAAC2D,MAAL,CAAY,CAAZ,EAAe,CAAf,CAFV;AAAA,MAGIJ,aAAa,GAAI,GAAEG,IAAK,IAAGE,KAAM,IAAGC,GAAI,EAH5C,CAF2B,CAO3B;;AACA,MAAIC,UAAU,GAAG,IAAIC,IAAJ,CAASR,aAAT,CAAjB,CAR2B,CAU3B;;AACA,MAAIS,OAAO,GAAGF,UAAU,CAACG,MAAX,EAAd;AACA,MAAIC,YAAY,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAAnB,CAZ2B,CAc3B;;AACA,MAAIC,MAAM,GAAI,GAAEP,KAAM,IAAGC,GAAI,WAAUK,YAAY,CAACF,OAAD,CAAU,EAA7D;AAEA,SAAOG,MAAP;AACH,CAlBD;;AAoBA,MAAMC,OAAO,GAAIpE,IAAD,IAAU;AACtB;AACA;AACA,MAAIqE,KAAK,GAAIrE,IAAI,CAACsE,WAAL,OAAuB,IAApC;AAAA,MACIV,KAAK,GAAG,MAAM5D,IAAI,CAACuE,QAAL,KAAkB,CAAxB,CADZ;AAAA,MAEIV,GAAG,GAAG,KAAK7D,IAAI,CAACoE,OAAL,EAFf;AAAA,MAGIV,IAAI,GAAGW,KAAK,GAAGrE,IAAI,CAACsE,WAAL,KAAqB,CAAxB,GAA4BtE,IAAI,CAACsE,WAAL,EAH5C;;AAKA,MAAIV,KAAK,CAACrD,MAAN,GAAe,CAAnB,EAAsB;AAClBqD,IAAAA,KAAK,GAAG,MAAMA,KAAd;AACH;;AAED,MAAIC,GAAG,CAACtD,MAAJ,GAAa,CAAjB,EAAoB;AAChBsD,IAAAA,GAAG,GAAG,MAAMA,GAAZ;AACH;;AAED,SAAO,CAACH,IAAD,EAAOE,KAAP,EAAcC,GAAd,EAAmBW,IAAnB,CAAwB,EAAxB,CAAP;AACH,CAjBD;;AAoBA,MAAMC,mBAAmB,GAAIxE,SAAD,IAAe;AACvCyE,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B1E,SAA9B;AACH,CAFD;;AAIA,eAAemB,cAAf;AACA,SAASwB,YAAT,EAAuBwB,OAAvB,EAAgCK,mBAAhC,EAAqD3E,YAArD","sourcesContent":["const getTitleData = (rawdata, date, movieName) => {\r\n    let titleData = [],\r\n        filtered = rawdata.filter( data => data.movieNm === movieName );\r\n    if ( filtered.length === 0 ) {\r\n        return null;\r\n    }\r\n    \r\n    filtered.forEach( data => {\r\n        const { rank, movieNm, movieCd, openDt, salesAmt, salesAcc, audiCnt, audiAcc, scrnCnt, showcnt, date } = data;\r\n        const tempObj = { rank, movieNm, movieCd, openDt, salesAmt, salesAcc, audiCnt, audiAcc, scrnCnt, showcnt, date };\r\n        titleData.push(tempObj);\r\n    });\r\n\r\n    return titleData;\r\n}\r\n\r\nconst getDefaultData = (data, date, isAttendance = true) => {\r\n    const title4Attendance = { date, daily: \"관객수\", cumulative: \"누적관객수\", theaters: \"상영관수\", trend: \"\" },\r\n          title4Income = { date, daily: \"수입\", cumulative: \"누적수입\", theaters: \"상영관수\", trend: \"\"};\r\n\r\n    let defaultData = {\r\n        title: isAttendance ? title4Attendance : title4Income,\r\n        daily: [],\r\n        cumulative: [],\r\n        theaters: [],\r\n        trend: null,\r\n        rawdata: data,\r\n    }\r\n\r\n    let movieName = [],\r\n        targetMovies = [],\r\n        rawdata = data,\r\n        targetData = rawdata.filter( data => data.date === date ),\r\n        dataKey = isAttendance ? 'audiCnt' : 'salesAmt',\r\n        unit = isAttendance ? '명' : '원';\r\n\r\n    // 1. daily,\r\n    for( let i = 0; i < 5; i++ ) {\r\n        let daily = { movieCode: `daily${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i][dataKey].toLocaleString() + unit },\r\n            tempObject = { name: targetData[i].movieNm, data: [] };\r\n        \r\n        defaultData['daily'].push(daily);\r\n\r\n        movieName.push(tempObject);\r\n        targetMovies.push(targetData[i].movieNm);\r\n    }\r\n    dataKey = isAttendance ? 'audiAcc' : 'salesAcc';\r\n    // 2. cumulative\r\n    targetData.sort((a, b) => b[dataKey] - a[dataKey]);\r\n    for ( let i = 0; i < 5; i++ ) {\r\n        let cumulative = { movieCode: `cumulative${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i][dataKey].toLocaleString() + unit };\r\n        defaultData['cumulative'].push(cumulative);\r\n    }\r\n\r\n    // 3. theaters\r\n    targetData.sort((a, b) => b.scrnCnt - a.scrnCnt);\r\n    for( let i = 0; i < 5; i++ ) {\r\n        let theaters = { name: targetData[i].movieNm, y: targetData[i].scrnCnt };\r\n        defaultData['theaters'].push(theaters);\r\n    }\r\n\r\n    // 4. Trend\r\n    defaultData.trend = getTrendData(rawdata, defaultData.daily[0].movieCode, date, isAttendance);\r\n    defaultData.title.trend = defaultData.trend.title;\r\n   \r\n    return defaultData;\r\n}\r\n\r\nconst getTrendData = (rawdata, clicked, date, isAttendance) => {\r\n    let trendData = null,\r\n        categories = [],\r\n        series = [],\r\n        data = [],\r\n        filtered = null,\r\n        targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\r\n        dataType = clicked.replace(/[0-9]*/g, \"\"),\r\n        lastIndex = 0,\r\n        value = '',\r\n        title = '',\r\n        releaseDate = '';\r\n \r\n    // rawdata에서 clicked영화만 추출\r\n    filtered = rawdata.filter( rawdata => rawdata.movieCd === targetMovieCode );\r\n\r\n    // filter를 오늘까지 자름\r\n    lastIndex = filtered.findIndex( filtered => filtered.date === date );\r\n    if ( isAttendance ) {\r\n        value = dataType === \"daily\" ? \"audiCnt\" : \"audiAcc\";\r\n        title = dataType === \"daily\" ? `${filtered[0].movieNm} 일별 관객수` : `${filtered[0].movieNm} 일별 누적관객수`;\r\n    } else {\r\n        value = dataType === \"daily\" ? \"salesAmt\" : \"salesAcc\";\r\n        title = dataType === \"daily\" ? `${filtered[0].movieNm} 일별 수입` : `${filtered[0].movieNm} 일별 누적수입`;\r\n    }\r\n\r\n    //releaseDate = filtered[0].openDt.replace(/-/g, '');\r\n\r\n    for(let i = 0; i <= lastIndex; i++) {\r\n        let formattedDate = getTrendDate(filtered[i].date),\r\n            //seriesData = ( filtered[i].date !== releaseDate ) ? {y: filtered[i][value] } :  { y: filtered[i][value], id: 'annotation' };\r\n            seriesData = filtered[i][value];\r\n\r\n        categories.push(formattedDate); // x축 날짜 데이터 삽입\r\n        data.push(seriesData);\r\n        debugger;\r\n    }\r\n\r\n    // trend data구조에 맞게 처리\r\n    series.push({ name: filtered[0].movieNm, data });\r\n    trendData = { categories, series, title };\r\n\r\n\r\n    // return trend data\r\n    return trendData;\r\n}\r\n\r\nconst getTrendDate = (date) => {\r\n    // 1. date포맷 변경: \"20190101\" -> \"2019-01-01\" \r\n    let year = date.substr(0, 4),\r\n        month = date.substr(4, 2),\r\n        day = date.substr(6, 5),\r\n        formattedDate = `${year}-${month}-${day}`;\r\n    \r\n    // 2. Date 객체 생성\r\n    let dateObject = new Date(formattedDate);\r\n\r\n    // 3. getDay로 요일 생성\r\n    let weekday = dateObject.getDay();\r\n    let weekdayArray = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\r\n\r\n    // 4. 요일 + 달.일 형식으로 변경\r\n    let result = `${month}.${day} <br /> ${weekdayArray[weekday]}`;\r\n\r\n    return result;\r\n}\r\n\r\nconst getDate = (date) => {\r\n    //let date = new Date();\r\n    //date.setDate(date.getDate() + i);\r\n    let isNow = (date.getFullYear() === 2020),\r\n        month = '' + (date.getMonth() + 1),\r\n        day = '' + date.getDate(),\r\n        year = isNow ? date.getFullYear() - 1 : date.getFullYear();\r\n    \r\n    if (month.length < 2) {\r\n        month = '0' + month;\r\n    }\r\n\r\n    if (day.length < 2) {\r\n        day = '0' + day;\r\n    }\r\n\r\n    return [year, month, day].join('');\r\n}\r\n\r\n\r\nconst getSearchResultData = (movieName) => {\r\n    console.log('dataprocessing', movieName);\r\n}\r\n\r\nexport default getDefaultData;\r\nexport { getTrendData, getDate, getSearchResultData, getTitleData };"]},"metadata":{},"sourceType":"module"}