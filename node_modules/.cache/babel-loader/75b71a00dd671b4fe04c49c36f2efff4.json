{"ast":null,"code":"const getDefaultData = (data, date) => {\n  let defaultData = {\n    title: {\n      date: date,\n      daily: \"관객수\",\n      cumulative: \"누적관객수\",\n      theaters: \"상영관수\",\n      trend: \"\"\n    },\n    daily: [],\n    cumulative: [],\n    theaters: [],\n    trend: {\n      series: null,\n      categories: null\n    },\n    rawdata: data.data.data\n  };\n  let movieName = [],\n      dateArray = [],\n      targetMovies = [];\n  let rawdata = data.data.data,\n      targetData = rawdata.filter(data => data.date === date); // 1. daily, cumulative, theaters\n\n  for (let i = 0; i < 5; i++) {\n    let daily = {\n      movieCode: `daily${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiCnt\n    },\n        cumulative = {\n      movieCode: `cumulative${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiAcc\n    },\n        theaters = {\n      name: targetData[i].movieNm,\n      y: targetData[i].scrnCnt\n    },\n        tempObject = {\n      name: targetData[i].movieNm,\n      data: []\n    };\n    defaultData['daily'].push(daily);\n    defaultData['cumulative'].push(cumulative);\n    defaultData['theaters'].push(theaters);\n    movieName.push(tempObject);\n    targetMovies.push(targetData[i].movieNm);\n  } // 2. Trend\n\n\n  for (let i = -1; i > -8; i--) {\n    let date = getYesterday(i);\n    dateArray.push(date);\n  }\n\n  let myData = [];\n  dateArray.forEach(targetDate => {\n    myData.push(rawdata.filter(data => data.date === targetDate));\n  });\n  let myArr = [].concat(...myData);\n  let tempArray = [];\n  targetMovies.forEach(movie => {\n    let filtered = myArr.filter(data => data.movieNm === movie),\n        tempObj = {\n      name: movie,\n      data: null\n    },\n        tempArr = [];\n\n    for (let i = 6; i >= 0; i--) {\n      let targetDate = dateArray[i],\n          tempElement = filtered.find(data => data.date === targetDate),\n          tempValue = null;\n\n      if (filtered[i] && filtered[i].date === targetDate) {\n        tempValue = filtered[i].audiCnt;\n      } else if (tempElement) {\n        tempValue = tempElement.audiCnt;\n      }\n\n      tempArr.push(tempValue);\n    }\n\n    tempObj.data = tempArr;\n    tempArray.push(tempObj);\n  });\n  dateArray.sort();\n  defaultData['trend']['series'] = tempArray;\n  defaultData['trend']['categories'] = dateArray;\n  return defaultData;\n};\n\nconst getNewTrendData = (rawdata, clicked) => {\n  let newTrendData = {\n    categories: null,\n    series: null\n  },\n      categories = [],\n      series = [],\n      data = [],\n      filtered = null,\n      targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\n      dataType = clicked.replace(/[0-9]*/g, \"\"),\n      yesterday = getYesterday(-1),\n      lastIndex = 0; // clicked 처리\n  // rawdata에서 clicked영화만 추출\n\n  filtered = rawdata.filter(rawdata => rawdata.movieCd === targetMovieCode); // filter를 오늘까지 자름\n\n  lastIndex = filtered.findIndex(filtered => filtered.date === yesterday);\n\n  for (let i = 0; i < index; i++) {\n    categories.push(filtered[i].date);\n    data.push(filtered[i].audiCnt);\n  } // trend data구조에 맞게 처리\n\n\n  series.push({\n    name: filtered[i].movieNm,\n    data\n  }); // return trend data\n};\n\nconst getYesterday = i => {\n  let date = new Date();\n  date.setDate(date.getDate() + i);\n  let month = '' + (date.getMonth() + 1),\n      day = '' + date.getDate(),\n      year = date.getFullYear() - 1;\n\n  if (month.length < 2) {\n    month = '0' + month;\n  }\n\n  if (day.length < 2) {\n    day = '0' + day;\n  }\n\n  return [year, month, day].join('');\n};\n\nexport default getDefaultData;\nexport { getNewTrendData, getYesterday };","map":{"version":3,"sources":["D:/VisualStudioCode/dashboard/src/common/dataProcessing.js"],"names":["getDefaultData","data","date","defaultData","title","daily","cumulative","theaters","trend","series","categories","rawdata","movieName","dateArray","targetMovies","targetData","filter","i","movieCode","movieCd","movieNm","value","audiCnt","audiAcc","name","y","scrnCnt","tempObject","push","getYesterday","myData","forEach","targetDate","myArr","concat","tempArray","movie","filtered","tempObj","tempArr","tempElement","find","tempValue","sort","getNewTrendData","clicked","newTrendData","targetMovieCode","replace","dataType","yesterday","lastIndex","findIndex","index","Date","setDate","getDate","month","getMonth","day","year","getFullYear","length","join"],"mappings":"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","sourcesContent":["const getDefaultData = (data, date) => {\r\n    let defaultData = {\r\n        title: { date: date, daily: \"관객수\", cumulative: \"누적관객수\", theaters: \"상영관수\", trend: \"\" },\r\n        daily: [],\r\n        cumulative: [],\r\n        theaters: [],\r\n        trend: { series: null, categories: null },\r\n        rawdata: data.data.data,\r\n    }\r\n\r\n    let movieName = [],\r\n        dateArray = [],\r\n        targetMovies = [];\r\n\r\n    let rawdata = data.data.data,\r\n        targetData = rawdata.filter( data => data.date === date );\r\n    \r\n    // 1. daily, cumulative, theaters\r\n    for( let i = 0; i < 5; i++) {\r\n        let daily = { movieCode: `daily${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i].audiCnt },\r\n            cumulative = { movieCode: `cumulative${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i].audiAcc },\r\n            theaters = { name: targetData[i].movieNm, y: targetData[i].scrnCnt },\r\n            tempObject = { name: targetData[i].movieNm, data: [] };\r\n        \r\n        defaultData['daily'].push(daily);\r\n        defaultData['cumulative'].push(cumulative);\r\n        defaultData['theaters'].push(theaters);\r\n        movieName.push(tempObject);\r\n        targetMovies.push(targetData[i].movieNm);\r\n    }\r\n\r\n    // 2. Trend\r\n    for(let i = -1; i > -8; i--) {\r\n        let date = getYesterday(i);\r\n        dateArray.push(date);\r\n    }\r\n\r\n    \r\n    let myData = [];\r\n    dateArray.forEach(targetDate => {\r\n        myData.push(rawdata.filter( data => data.date === targetDate));\r\n    });\r\n\r\n    let myArr = [].concat( ...myData );\r\n    \r\n    let tempArray = [];\r\n    targetMovies.forEach(movie => {\r\n        let filtered = myArr.filter(data => data.movieNm === movie),\r\n            tempObj = { name: movie, data: null },\r\n            tempArr = [];\r\n            \r\n        for(let i = 6; i >= 0; i--) {\r\n            let targetDate = dateArray[i],\r\n                tempElement = filtered.find( data => data.date === targetDate ),\r\n                tempValue = null;\r\n\r\n            if( filtered[i] && filtered[i].date === targetDate) {\r\n                tempValue = filtered[i].audiCnt;\r\n\r\n            } else if (tempElement) {\r\n                tempValue = tempElement.audiCnt;\r\n            } \r\n            tempArr.push(tempValue);\r\n        }\r\n\r\n        tempObj.data = tempArr;\r\n        tempArray.push(tempObj);\r\n    });\r\n    dateArray.sort();\r\n    \r\n    defaultData['trend']['series'] = tempArray;\r\n    defaultData['trend']['categories'] = dateArray;\r\n\r\n\r\n    return defaultData;\r\n}\r\n\r\nconst getNewTrendData = (rawdata, clicked) => {\r\n    let newTrendData = { categories: null, series: null },\r\n        categories = [],\r\n        series = [],\r\n        data = [],\r\n        filtered = null,\r\n        targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\r\n        dataType = clicked.replace(/[0-9]*/g, \"\"),\r\n        yesterday = getYesterday(-1),\r\n        lastIndex = 0;\r\n\r\n    // clicked 처리\r\n    \r\n    // rawdata에서 clicked영화만 추출\r\n    filtered = rawdata.filter( rawdata => rawdata.movieCd === targetMovieCode );\r\n\r\n    // filter를 오늘까지 자름\r\n    lastIndex = filtered.findIndex( filtered => filtered.date === yesterday );\r\n    for(let i = 0; i < index; i++) {\r\n        categories.push(filtered[i].date);\r\n        data.push(filtered[i].audiCnt);\r\n    }\r\n\r\n    // trend data구조에 맞게 처리\r\n    series.push({ name: filtered[i].movieNm, data });\r\n\r\n    // return trend data\r\n    \r\n\r\n}\r\n\r\nconst getYesterday = (i) => {\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + i);\r\n\r\n    let month = '' + (date.getMonth() + 1),\r\n        day = '' + date.getDate(),\r\n        year = date.getFullYear() - 1;\r\n    \r\n    if (month.length < 2) {\r\n        month = '0' + month;\r\n    }\r\n\r\n    if (day.length < 2) {\r\n        day = '0' + day;\r\n    }\r\n\r\n    return [year, month, day].join('');\r\n}\r\n\r\nexport default getDefaultData;\r\nexport { getNewTrendData, getYesterday };"]},"metadata":{},"sourceType":"module"}