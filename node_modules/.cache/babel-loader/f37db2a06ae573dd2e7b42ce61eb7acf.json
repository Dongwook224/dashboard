{"ast":null,"code":"const getDefaultData = (data, date) => {\n  let defaultData = {\n    title: {\n      date,\n      daily: \"관객수\",\n      cumulative: \"누적관객수\",\n      theaters: \"상영관수\",\n      trend: \"\"\n    },\n    daily: [],\n    cumulative: [],\n    theaters: [],\n    trend: null,\n    rawdata: data\n  };\n  let movieName = [],\n      targetMovies = [];\n  let rawdata = data,\n      targetData = rawdata.filter(data => data.date === date); // 1. daily,\n\n  for (let i = 0; i < 5; i++) {\n    let daily = {\n      movieCode: `daily${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiCnt.toLocaleString()\n    },\n        tempObject = {\n      name: targetData[i].movieNm,\n      data: []\n    };\n    defaultData['daily'].push(daily);\n    movieName.push(tempObject);\n    targetMovies.push(targetData[i].movieNm);\n  } // 2. cumulative\n\n\n  targetData.sort((a, b) => b.audiAcc - a.audiAcc);\n\n  for (let i = 0; i < 5; i++) {\n    let cumulative = {\n      movieCode: `cumulative${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiAcc.toLocaleString()\n    };\n    defaultData['cumulative'].push(cumulative);\n  } // 3. theaters\n\n\n  targetData.sort((a, b) => b.scrnCnt - a.scrnCnt);\n\n  for (let i = 0; i < 5; i++) {\n    let theaters = {\n      name: targetData[i].movieNm,\n      y: targetData[i].scrnCnt\n    };\n    defaultData['theaters'].push(theaters);\n  } // 4. Trend\n\n\n  debugger;\n  defaultData.trend = getTrendData(rawdata, defaultData.daily[0].movieCode);\n  defaultData.title.trend = defaultData.trend.title;\n  return defaultData;\n};\n\nconst getTrendData = (rawdata, clicked) => {\n  let trendData = null,\n      categories = [],\n      series = [],\n      data = [],\n      filtered = null,\n      targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\n      dataType = clicked.replace(/[0-9]*/g, \"\"),\n      today = getDate(new Date()),\n      lastIndex = 0,\n      value = '',\n      title = '',\n      releaseDate = ''; // rawdata에서 clicked영화만 추출\n\n  filtered = rawdata.filter(rawdata => rawdata.movieCd === targetMovieCode); // filter를 오늘까지 자름\n\n  lastIndex = filtered.findIndex(filtered => filtered.date === today);\n  value = dataType === \"daily\" ? \"audiCnt\" : \"audiAcc\";\n  title = dataType === \"daily\" ? `${filtered[0].movieNm} 일별 관객수` : `${filtered[0].movieNm} 일별 누적관객수`;\n  releaseDate = filtered[0].openDt.replace(/-/g, '');\n\n  for (let i = 0; i <= lastIndex; i++) {\n    let formattedDate = getTrendDate(filtered[i].date),\n        //seriesData = ( filtered[i].date !== releaseDate ) ? {y: filtered[i][value] } :  { y: filtered[i][value], id: 'annotation' };\n    seriesData = filtered[i][value];\n    categories.push(formattedDate); // x축 날짜 데이터 삽입\n\n    data.push(seriesData);\n  } // trend data구조에 맞게 처리\n\n\n  series.push({\n    name: filtered[0].movieNm,\n    data\n  });\n  trendData = {\n    categories,\n    series,\n    title\n  }; // return trend data\n\n  return trendData;\n};\n\nconst getTrendDate = date => {\n  // 1. date포맷 변경: \"20190101\" -> \"2019-01-01\" \n  let year = date.substr(0, 4),\n      month = date.substr(4, 2),\n      day = date.substr(6, 5),\n      formattedDate = `${year}-${month}-${day}`; // 2. Date 객체 생성\n\n  let dateObject = new Date(formattedDate); // 3. getDay로 요일 생성\n\n  let weekday = dateObject.getDay();\n  let weekdayArray = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"]; // 4. 요일 + 달.일 형식으로 변경\n\n  let result = `${month}.${day} <br /> ${weekdayArray[weekday]}`;\n  return result;\n};\n\nconst getDate = date => {\n  //let date = new Date();\n  //date.setDate(date.getDate() + i);\n  let isNow = date.getFullYear() === 2020,\n      month = '' + (date.getMonth() + 1),\n      day = '' + date.getDate(),\n      year = isNow ? date.getFullYear() - 1 : date.getFullYear();\n\n  if (month.length < 2) {\n    month = '0' + month;\n  }\n\n  if (day.length < 2) {\n    day = '0' + day;\n  }\n\n  return [year, month, day].join('');\n};\n\nconst getSearchResultData = movieName => {\n  console.log('dataprocessing', movieName);\n};\n\nexport default getDefaultData;\nexport { getTrendData, getDate, getSearchResultData };","map":{"version":3,"sources":["D:/VisualStudioCode/dashboard/src/common/dataProcessing.js"],"names":["getDefaultData","data","date","defaultData","title","daily","cumulative","theaters","trend","rawdata","movieName","targetMovies","targetData","filter","i","movieCode","movieCd","movieNm","value","audiCnt","toLocaleString","tempObject","name","push","sort","a","b","audiAcc","scrnCnt","y","getTrendData","clicked","trendData","categories","series","filtered","targetMovieCode","replace","dataType","today","getDate","Date","lastIndex","releaseDate","findIndex","openDt","formattedDate","getTrendDate","seriesData","year","substr","month","day","dateObject","weekday","getDay","weekdayArray","result","isNow","getFullYear","getMonth","length","join","getSearchResultData","console","log"],"mappings":"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","sourcesContent":["\r\nconst getDefaultData = (data, date) => {\r\n    let defaultData = {\r\n        title: { date, daily: \"관객수\", cumulative: \"누적관객수\", theaters: \"상영관수\", trend: \"\" },\r\n        daily: [],\r\n        cumulative: [],\r\n        theaters: [],\r\n        trend: null,\r\n        rawdata: data,\r\n    }\r\n\r\n    let movieName = [],\r\n        targetMovies = [];\r\n\r\n    let rawdata = data,\r\n        targetData = rawdata.filter( data => data.date === date );\r\n   \r\n    // 1. daily,\r\n    for( let i = 0; i < 5; i++ ) {\r\n        let daily = { movieCode: `daily${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i].audiCnt.toLocaleString() },\r\n            tempObject = { name: targetData[i].movieNm, data: [] };\r\n        \r\n        defaultData['daily'].push(daily);\r\n\r\n        movieName.push(tempObject);\r\n        targetMovies.push(targetData[i].movieNm);\r\n    }\r\n\r\n    // 2. cumulative\r\n    targetData.sort((a, b) => b.audiAcc - a.audiAcc);\r\n    for ( let i = 0; i < 5; i++ ) {\r\n        let cumulative = { movieCode: `cumulative${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i].audiAcc.toLocaleString() };\r\n        defaultData['cumulative'].push(cumulative);\r\n    }\r\n\r\n    // 3. theaters\r\n    targetData.sort((a, b) => b.scrnCnt - a.scrnCnt);\r\n    for( let i = 0; i < 5; i++ ) {\r\n        let theaters = { name: targetData[i].movieNm, y: targetData[i].scrnCnt };\r\n        defaultData['theaters'].push(theaters);\r\n    }\r\n\r\n    // 4. Trend\r\n    debugger;\r\n    defaultData.trend = getTrendData(rawdata, defaultData.daily[0].movieCode);\r\n    defaultData.title.trend = defaultData.trend.title;\r\n   \r\n    return defaultData;\r\n}\r\n\r\nconst getTrendData = (rawdata, clicked) => {\r\n    let trendData = null,\r\n        categories = [],\r\n        series = [],\r\n        data = [],\r\n        filtered = null,\r\n        targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\r\n        dataType = clicked.replace(/[0-9]*/g, \"\"),\r\n        today = getDate(new Date()),\r\n        lastIndex = 0,\r\n        value = '',\r\n        title = '',\r\n        releaseDate = '';\r\n \r\n    // rawdata에서 clicked영화만 추출\r\n    filtered = rawdata.filter( rawdata => rawdata.movieCd === targetMovieCode );\r\n\r\n    // filter를 오늘까지 자름\r\n    lastIndex = filtered.findIndex( filtered => filtered.date === today );\r\n    value = dataType === \"daily\" ? \"audiCnt\" : \"audiAcc\";\r\n    title = dataType === \"daily\" ? `${filtered[0].movieNm} 일별 관객수` : `${filtered[0].movieNm} 일별 누적관객수`\r\n    releaseDate = filtered[0].openDt.replace(/-/g, '');\r\n\r\n    for(let i = 0; i <= lastIndex; i++) {\r\n        let formattedDate = getTrendDate(filtered[i].date),\r\n            //seriesData = ( filtered[i].date !== releaseDate ) ? {y: filtered[i][value] } :  { y: filtered[i][value], id: 'annotation' };\r\n            seriesData = filtered[i][value];\r\n\r\n        categories.push(formattedDate); // x축 날짜 데이터 삽입\r\n        data.push(seriesData);\r\n    }\r\n\r\n    // trend data구조에 맞게 처리\r\n    series.push({ name: filtered[0].movieNm, data });\r\n    trendData = { categories, series, title };\r\n\r\n    // return trend data\r\n    return trendData;\r\n}\r\n\r\nconst getTrendDate = (date) => {\r\n    // 1. date포맷 변경: \"20190101\" -> \"2019-01-01\" \r\n    let year = date.substr(0, 4),\r\n        month = date.substr(4, 2),\r\n        day = date.substr(6, 5),\r\n        formattedDate = `${year}-${month}-${day}`;\r\n    \r\n    // 2. Date 객체 생성\r\n    let dateObject = new Date(formattedDate);\r\n\r\n    // 3. getDay로 요일 생성\r\n    let weekday = dateObject.getDay();\r\n    let weekdayArray = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\r\n\r\n    // 4. 요일 + 달.일 형식으로 변경\r\n    let result = `${month}.${day} <br /> ${weekdayArray[weekday]}`;\r\n\r\n    return result;\r\n}\r\n\r\nconst getDate = (date) => {\r\n    //let date = new Date();\r\n    //date.setDate(date.getDate() + i);\r\n    let isNow = (date.getFullYear() === 2020),\r\n        month = '' + (date.getMonth() + 1),\r\n        day = '' + date.getDate(),\r\n        year = isNow ? date.getFullYear() - 1 : date.getFullYear();\r\n    \r\n    if (month.length < 2) {\r\n        month = '0' + month;\r\n    }\r\n\r\n    if (day.length < 2) {\r\n        day = '0' + day;\r\n    }\r\n\r\n    return [year, month, day].join('');\r\n}\r\n\r\n\r\nconst getSearchResultData = (movieName) => {\r\n    console.log('dataprocessing', movieName);\r\n}\r\n\r\nexport default getDefaultData;\r\nexport { getTrendData, getDate, getSearchResultData };"]},"metadata":{},"sourceType":"module"}