{"ast":null,"code":"const defaultDataProcessing = (data, date) => {\n  let processedData = {\n    dailyAttendence: [],\n    cumulativeAttendence: [],\n    pieChartData: [],\n    lineChart: null\n  };\n  let movieName = [],\n      dateArray = [],\n      targetMovies = [];\n  let rawdata = data.data.data,\n      targetData = rawdata.filter(data => data.date === date);\n\n  for (let i = 0; i < 5; i++) {\n    let dailyAttendence = {\n      id: i,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiCnt\n    },\n        cumulativeAttendence = {\n      id: i,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiAcc\n    },\n        pieChartData = {\n      name: targetData[i].movieNm,\n      y: targetData[i].scrnCnt\n    },\n        tempObject = {\n      name: targetData[i].movieNm,\n      data: []\n    };\n    processedData['dailyAttendence'].push(dailyAttendence);\n    processedData['cumulativeAttendence'].push(cumulativeAttendence);\n    processedData['pieChartData'].push(pieChartData); //processedData['lineChartData'];\n\n    movieName.push(tempObject);\n    targetMovies.push(targetData[i].movieNm);\n  }\n\n  for (let i = -1; i > -8; i--) {\n    let date = getYesterday(i);\n    dateArray.push(date);\n  } //dateArray\n  // series { name: 'movei1', data: [111, 222, 111, 111, 111, 111, 111] }\n  // let lineData = [\n  //         { name: 'movie1', data: [111,222,333,444,555,666,777] },\n  //         { name: 'movie2', data: [111,222,333,444,555,666,777]},\n  //         { name: 'movie3', data: [111,222,333,444,555,666,777]},\n  //         { name: 'movie4', data: [111,222,333,444,555,666,777]},\n  //         { name: 'movie5', data: [111,222,333,444,555,666,777]}\n  // ]  \n  // 전체 데이터에서 날짜를 뽑는다\n\n\n  let myData = [];\n  dateArray.forEach(targetDate => {\n    myData.push(rawdata.filter(data => data.date === targetDate));\n  });\n  let myArr = [].concat(...myData);\n  let lineData = [];\n  let tempArray = [];\n  targetMovies.forEach(movie => {\n    let filtered = myArr.filter(data => data.movieNm === movie),\n        tempObj = {\n      name: movie,\n      data: null\n    },\n        tempArr = [];\n\n    for (let i = 6; i >= 0; i--) {\n      let targetDate = dateArray[i],\n          tempElement = filtered.find(data => data.date === targetDate),\n          tempValue = null;\n\n      if (filtered[i] && filtered[i].date === targetDate) {\n        tempValue = filtered[i].audiCnt;\n      } else if (tempElement) {\n        tempValue = tempElement.audiCnt;\n      }\n\n      tempArr.push(tempValue);\n    }\n\n    tempObj.data = tempArr;\n    tempArray.push(tempObj);\n  });\n  debugger;\n  let myData2 = {}; // 각 날짜에서 해당 영화를 뽑는다\n  //만약 영화이름과 linedata key값이 일치하면 audiCnt를 넣는다<div className=\"\"></div>\n  // 있으면 데이터 집어넣고 없으면 null로 집어넣는다\n\n  return processedData;\n};\n\nconst getYesterday = i => {\n  let date = new Date();\n  date.setDate(date.getDate() + i);\n  let month = '' + (date.getMonth() + 1),\n      day = '' + date.getDate(),\n      year = date.getFullYear() - 1;\n\n  if (month.length < 2) {\n    month = '0' + month;\n  }\n\n  if (day.length < 2) {\n    day = '0' + day;\n  }\n\n  return [year, month, day].join('');\n};\n\nexport default defaultDataProcessing;\nexport { getYesterday };","map":{"version":3,"sources":["D:/VisualStudioCode/dashboard/src/components/dataProcessing.js"],"names":["defaultDataProcessing","data","date","processedData","dailyAttendence","cumulativeAttendence","pieChartData","lineChart","movieName","dateArray","targetMovies","rawdata","targetData","filter","i","id","movieNm","value","audiCnt","audiAcc","name","y","scrnCnt","tempObject","push","getYesterday","myData","forEach","targetDate","myArr","concat","lineData","tempArray","movie","filtered","tempObj","tempArr","tempElement","find","tempValue","myData2","Date","setDate","getDate","month","getMonth","day","year","getFullYear","length","join"],"mappings":"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","sourcesContent":["\r\nconst defaultDataProcessing = (data, date) => {\r\n    let processedData = {\r\n        dailyAttendence: [],\r\n        cumulativeAttendence: [],\r\n        pieChartData: [],\r\n        lineChart: null\r\n    }\r\n    let movieName = [],\r\n        dateArray = [],\r\n        targetMovies = [];\r\n\r\n    let rawdata = data.data.data,\r\n        targetData = rawdata.filter( data => data.date === date );\r\n    \r\n    for( let i = 0; i < 5; i++) {\r\n        let dailyAttendence = { id: i, movieName: targetData[i].movieNm, value: targetData[i].audiCnt },\r\n            cumulativeAttendence = { id: i, movieName: targetData[i].movieNm, value: targetData[i].audiAcc },\r\n            pieChartData = { name: targetData[i].movieNm, y: targetData[i].scrnCnt },\r\n            tempObject = { name: targetData[i].movieNm, data: [] };\r\n        \r\n        processedData['dailyAttendence'].push(dailyAttendence);\r\n        processedData['cumulativeAttendence'].push(cumulativeAttendence);\r\n        processedData['pieChartData'].push(pieChartData);\r\n        //processedData['lineChartData'];\r\n        movieName.push(tempObject);\r\n        targetMovies.push(targetData[i].movieNm);\r\n        \r\n    }\r\n\r\n    for(let i = -1; i > -8; i--) {\r\n        let date = getYesterday(i);\r\n        dateArray.push(date);\r\n    }\r\n\r\n    //dateArray\r\n    \r\n    // series { name: 'movei1', data: [111, 222, 111, 111, 111, 111, 111] }\r\n\r\n    // let lineData = [\r\n    //         { name: 'movie1', data: [111,222,333,444,555,666,777] },\r\n    //         { name: 'movie2', data: [111,222,333,444,555,666,777]},\r\n    //         { name: 'movie3', data: [111,222,333,444,555,666,777]},\r\n    //         { name: 'movie4', data: [111,222,333,444,555,666,777]},\r\n    //         { name: 'movie5', data: [111,222,333,444,555,666,777]}\r\n    // ]  \r\n\r\n    // 전체 데이터에서 날짜를 뽑는다\r\n    let myData = [];\r\n    dateArray.forEach(targetDate => {\r\n        myData.push(rawdata.filter( data => data.date === targetDate));\r\n    });\r\n\r\n    let myArr = [].concat( ...myData );\r\n    let lineData = [];\r\n    let tempArray = [];\r\n    targetMovies.forEach(movie => {\r\n        let filtered = myArr.filter(data => data.movieNm === movie),\r\n            tempObj = { name: movie, data: null },\r\n            tempArr = [];\r\n            \r\n        for(let i = 6; i >= 0; i--) {\r\n            let targetDate = dateArray[i],\r\n                tempElement = filtered.find( data => data.date === targetDate ),\r\n                tempValue = null;\r\n\r\n            if( filtered[i] && filtered[i].date === targetDate) {\r\n                tempValue = filtered[i].audiCnt;\r\n\r\n            } else if (tempElement) {\r\n                tempValue = tempElement.audiCnt;\r\n            } \r\n            tempArr.push(tempValue);\r\n        }\r\n\r\n        tempObj.data = tempArr;\r\n        tempArray.push(tempObj);\r\n    });\r\n    \r\n    debugger;\r\n\r\n    let myData2 = {};\r\n    // 각 날짜에서 해당 영화를 뽑는다\r\n\r\n \r\n    //만약 영화이름과 linedata key값이 일치하면 audiCnt를 넣는다<div className=\"\"></div>\r\n\r\n    // 있으면 데이터 집어넣고 없으면 null로 집어넣는다\r\n\r\n\r\n\r\n    return processedData;\r\n}\r\n\r\nconst getYesterday = (i) => {\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + i);\r\n\r\n    let month = '' + (date.getMonth() + 1),\r\n        day = '' + date.getDate(),\r\n        year = date.getFullYear() - 1;\r\n    \r\n    if (month.length < 2) {\r\n        month = '0' + month;\r\n    }\r\n\r\n    if (day.length < 2) {\r\n        day = '0' + day;\r\n    }\r\n\r\n    return [year, month, day].join('');\r\n}\r\n\r\nexport default defaultDataProcessing;\r\nexport { getYesterday };"]},"metadata":{},"sourceType":"module"}