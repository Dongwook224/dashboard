{"ast":null,"code":"const getTitleData = (rawdata, date, movieName) => {\n  let filtered = rawdata.filter(data => data.movieNm === movieName);\n};\n\nconst getDefaultData = (data, date) => {\n  let defaultData = {\n    title: {\n      date,\n      daily: \"관객수\",\n      cumulative: \"누적관객수\",\n      theaters: \"상영관수\",\n      trend: \"\"\n    },\n    daily: [],\n    cumulative: [],\n    theaters: [],\n    trend: null,\n    rawdata: data\n  };\n  let movieName = [],\n      targetMovies = [];\n  let rawdata = data,\n      targetData = rawdata.filter(data => data.date === date); // 1. daily,\n\n  for (let i = 0; i < 5; i++) {\n    let daily = {\n      movieCode: `daily${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiCnt.toLocaleString()\n    },\n        tempObject = {\n      name: targetData[i].movieNm,\n      data: []\n    };\n    defaultData['daily'].push(daily);\n    movieName.push(tempObject);\n    targetMovies.push(targetData[i].movieNm);\n  } // 2. cumulative\n\n\n  targetData.sort((a, b) => b.audiAcc - a.audiAcc);\n\n  for (let i = 0; i < 5; i++) {\n    let cumulative = {\n      movieCode: `cumulative${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiAcc.toLocaleString()\n    };\n    defaultData['cumulative'].push(cumulative);\n  } // 3. theaters\n\n\n  targetData.sort((a, b) => b.scrnCnt - a.scrnCnt);\n\n  for (let i = 0; i < 5; i++) {\n    let theaters = {\n      name: targetData[i].movieNm,\n      y: targetData[i].scrnCnt\n    };\n    defaultData['theaters'].push(theaters);\n  } // 4. Trend\n\n\n  defaultData.trend = getTrendData(rawdata, defaultData.daily[0].movieCode, date);\n  defaultData.title.trend = defaultData.trend.title;\n  return defaultData;\n};\n\nconst getTrendData = (rawdata, clicked, date) => {\n  let trendData = null,\n      categories = [],\n      series = [],\n      data = [],\n      filtered = null,\n      targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\n      dataType = clicked.replace(/[0-9]*/g, \"\"),\n      lastIndex = 0,\n      value = '',\n      title = '',\n      releaseDate = ''; // rawdata에서 clicked영화만 추출\n\n  filtered = rawdata.filter(rawdata => rawdata.movieCd === targetMovieCode); // filter를 오늘까지 자름\n\n  lastIndex = filtered.findIndex(filtered => filtered.date === date);\n  value = dataType === \"daily\" ? \"audiCnt\" : \"audiAcc\";\n  title = dataType === \"daily\" ? `${filtered[0].movieNm} 일별 관객수` : `${filtered[0].movieNm} 일별 누적관객수`;\n  releaseDate = filtered[0].openDt.replace(/-/g, '');\n\n  for (let i = 0; i <= lastIndex; i++) {\n    let formattedDate = getTrendDate(filtered[i].date),\n        //seriesData = ( filtered[i].date !== releaseDate ) ? {y: filtered[i][value] } :  { y: filtered[i][value], id: 'annotation' };\n    seriesData = filtered[i][value];\n    categories.push(formattedDate); // x축 날짜 데이터 삽입\n\n    data.push(seriesData);\n  } // trend data구조에 맞게 처리\n\n\n  series.push({\n    name: filtered[0].movieNm,\n    data\n  });\n  trendData = {\n    categories,\n    series,\n    title\n  }; // return trend data\n\n  return trendData;\n};\n\nconst getTrendDate = date => {\n  // 1. date포맷 변경: \"20190101\" -> \"2019-01-01\" \n  let year = date.substr(0, 4),\n      month = date.substr(4, 2),\n      day = date.substr(6, 5),\n      formattedDate = `${year}-${month}-${day}`; // 2. Date 객체 생성\n\n  let dateObject = new Date(formattedDate); // 3. getDay로 요일 생성\n\n  let weekday = dateObject.getDay();\n  let weekdayArray = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"]; // 4. 요일 + 달.일 형식으로 변경\n\n  let result = `${month}.${day} <br /> ${weekdayArray[weekday]}`;\n  return result;\n};\n\nconst getDate = date => {\n  //let date = new Date();\n  //date.setDate(date.getDate() + i);\n  let isNow = date.getFullYear() === 2020,\n      month = '' + (date.getMonth() + 1),\n      day = '' + date.getDate(),\n      year = isNow ? date.getFullYear() - 1 : date.getFullYear();\n\n  if (month.length < 2) {\n    month = '0' + month;\n  }\n\n  if (day.length < 2) {\n    day = '0' + day;\n  }\n\n  return [year, month, day].join('');\n};\n\nconst getSearchResultData = movieName => {\n  console.log('dataprocessing', movieName);\n};\n\nexport default getDefaultData;\nexport { getTrendData, getDate, getSearchResultData, getTitleData };","map":{"version":3,"sources":["D:/VisualStudioCode/dashboard/src/common/dataProcessing.js"],"names":["getTitleData","rawdata","date","movieName","filtered","filter","data","movieNm","getDefaultData","defaultData","title","daily","cumulative","theaters","trend","targetMovies","targetData","i","movieCode","movieCd","value","audiCnt","toLocaleString","tempObject","name","push","sort","a","b","audiAcc","scrnCnt","y","getTrendData","clicked","trendData","categories","series","targetMovieCode","replace","dataType","lastIndex","releaseDate","findIndex","openDt","formattedDate","getTrendDate","seriesData","year","substr","month","day","dateObject","Date","weekday","getDay","weekdayArray","result","getDate","isNow","getFullYear","getMonth","length","join","getSearchResultData","console","log"],"mappings":"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","sourcesContent":["const getTitleData = (rawdata, date, movieName) => {\r\n    \r\n    let filtered = rawdata.filter( data => data.movieNm === movieName );\r\n    \r\n\r\n\r\n}\r\n\r\nconst getDefaultData = (data, date) => {\r\n    let defaultData = {\r\n        title: { date, daily: \"관객수\", cumulative: \"누적관객수\", theaters: \"상영관수\", trend: \"\" },\r\n        daily: [],\r\n        cumulative: [],\r\n        theaters: [],\r\n        trend: null,\r\n        rawdata: data,\r\n    }\r\n\r\n    let movieName = [],\r\n        targetMovies = [];\r\n\r\n    let rawdata = data,\r\n        targetData = rawdata.filter( data => data.date === date );\r\n   \r\n    // 1. daily,\r\n    for( let i = 0; i < 5; i++ ) {\r\n        let daily = { movieCode: `daily${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i].audiCnt.toLocaleString() },\r\n            tempObject = { name: targetData[i].movieNm, data: [] };\r\n        \r\n        defaultData['daily'].push(daily);\r\n\r\n        movieName.push(tempObject);\r\n        targetMovies.push(targetData[i].movieNm);\r\n    }\r\n\r\n    // 2. cumulative\r\n    targetData.sort((a, b) => b.audiAcc - a.audiAcc);\r\n    for ( let i = 0; i < 5; i++ ) {\r\n        let cumulative = { movieCode: `cumulative${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i].audiAcc.toLocaleString() };\r\n        defaultData['cumulative'].push(cumulative);\r\n    }\r\n\r\n    // 3. theaters\r\n    targetData.sort((a, b) => b.scrnCnt - a.scrnCnt);\r\n    for( let i = 0; i < 5; i++ ) {\r\n        let theaters = { name: targetData[i].movieNm, y: targetData[i].scrnCnt };\r\n        defaultData['theaters'].push(theaters);\r\n    }\r\n\r\n    // 4. Trend\r\n    defaultData.trend = getTrendData(rawdata, defaultData.daily[0].movieCode, date);\r\n    defaultData.title.trend = defaultData.trend.title;\r\n   \r\n    return defaultData;\r\n}\r\n\r\nconst getTrendData = (rawdata, clicked, date) => {\r\n    let trendData = null,\r\n        categories = [],\r\n        series = [],\r\n        data = [],\r\n        filtered = null,\r\n        targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\r\n        dataType = clicked.replace(/[0-9]*/g, \"\"),\r\n        lastIndex = 0,\r\n        value = '',\r\n        title = '',\r\n        releaseDate = '';\r\n \r\n    // rawdata에서 clicked영화만 추출\r\n    filtered = rawdata.filter( rawdata => rawdata.movieCd === targetMovieCode );\r\n\r\n    // filter를 오늘까지 자름\r\n    lastIndex = filtered.findIndex( filtered => filtered.date === date );\r\n    value = dataType === \"daily\" ? \"audiCnt\" : \"audiAcc\";\r\n    title = dataType === \"daily\" ? `${filtered[0].movieNm} 일별 관객수` : `${filtered[0].movieNm} 일별 누적관객수`\r\n    releaseDate = filtered[0].openDt.replace(/-/g, '');\r\n\r\n    for(let i = 0; i <= lastIndex; i++) {\r\n        let formattedDate = getTrendDate(filtered[i].date),\r\n            //seriesData = ( filtered[i].date !== releaseDate ) ? {y: filtered[i][value] } :  { y: filtered[i][value], id: 'annotation' };\r\n            seriesData = filtered[i][value];\r\n\r\n        categories.push(formattedDate); // x축 날짜 데이터 삽입\r\n        data.push(seriesData);\r\n    }\r\n\r\n    // trend data구조에 맞게 처리\r\n    series.push({ name: filtered[0].movieNm, data });\r\n    trendData = { categories, series, title };\r\n\r\n    // return trend data\r\n    return trendData;\r\n}\r\n\r\nconst getTrendDate = (date) => {\r\n    // 1. date포맷 변경: \"20190101\" -> \"2019-01-01\" \r\n    let year = date.substr(0, 4),\r\n        month = date.substr(4, 2),\r\n        day = date.substr(6, 5),\r\n        formattedDate = `${year}-${month}-${day}`;\r\n    \r\n    // 2. Date 객체 생성\r\n    let dateObject = new Date(formattedDate);\r\n\r\n    // 3. getDay로 요일 생성\r\n    let weekday = dateObject.getDay();\r\n    let weekdayArray = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\r\n\r\n    // 4. 요일 + 달.일 형식으로 변경\r\n    let result = `${month}.${day} <br /> ${weekdayArray[weekday]}`;\r\n\r\n    return result;\r\n}\r\n\r\nconst getDate = (date) => {\r\n    //let date = new Date();\r\n    //date.setDate(date.getDate() + i);\r\n    let isNow = (date.getFullYear() === 2020),\r\n        month = '' + (date.getMonth() + 1),\r\n        day = '' + date.getDate(),\r\n        year = isNow ? date.getFullYear() - 1 : date.getFullYear();\r\n    \r\n    if (month.length < 2) {\r\n        month = '0' + month;\r\n    }\r\n\r\n    if (day.length < 2) {\r\n        day = '0' + day;\r\n    }\r\n\r\n    return [year, month, day].join('');\r\n}\r\n\r\n\r\nconst getSearchResultData = (movieName) => {\r\n    console.log('dataprocessing', movieName);\r\n}\r\n\r\nexport default getDefaultData;\r\nexport { getTrendData, getDate, getSearchResultData, getTitleData };"]},"metadata":{},"sourceType":"module"}