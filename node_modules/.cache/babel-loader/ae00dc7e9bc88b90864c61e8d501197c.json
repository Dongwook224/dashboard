{"ast":null,"code":"import _objectSpread from \"D:\\\\VisualStudioCode\\\\dashboard\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"D:\\\\VisualStudioCode\\\\dashboard\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Container from 'react-bootstrap/Container';\nimport TopNav from './components/TopNav';\nimport Dashboard from './components/Dashboard';\nimport DashboardByTitle from './components/DashboardByTitle';\nimport getDefaultData, { getDate, getTrendData, getTitleData } from './common/dataProcessing';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isAttendace: true,\n      searchValue: '',\n      buttonValue: null,\n      titleData: null,\n      searchDate: new Date(new Date().setFullYear(new Date().getFullYear() - 1)),\n      currentDate: new Date(new Date().setFullYear(new Date().getFullYear() - 1)),\n      dropdownTitle: '영화명',\n      isLoading: true,\n      isSearch: false,\n      title: null,\n      daily: null,\n      cumulative: null,\n      theaters: null,\n      trend: null,\n      rawdata: null,\n      isTitle: false,\n      loadingMessage: React.createElement(\"p\", {\n        className: \"mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"\\uB370\\uC774\\uD130 \\uB85C\\uB4DC \\uC911\\uC785\\uB2C8\\uB2E4...\")\n    };\n    this.handleMovienameClick = this.handleMovienameClick.bind(this);\n    this.handleDropdownSelect = this.handleDropdownSelect.bind(this);\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleDatePickerChange = this.handleDatePickerChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n  }\n\n  handleDropdownSelect(event) {\n    const dropdownTitle = event === \"movieName\" ? \"영화명\" : \"날짜\";\n    this.setState(_objectSpread({}, this.state, {}, {\n      dropdownTitle\n    }));\n  }\n\n  handleSearchChange(event) {\n    this.setState(_objectSpread({}, this.state, {}, {\n      searchValue: event.target.value\n    }));\n  }\n\n  handleDatePickerChange(date) {\n    this.setState(_objectSpread({}, this.state, {}, {\n      searchDate: date\n    }));\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const isTitle = this.state.dropdownTitle === \"영화명\";\n    let data = null;\n\n    if (isTitle) {\n      data = getTitleData(this.state.rawdata, getDate(this.state.currentDate), this.state.searchValue);\n      this.setState(_objectSpread({}, this.state, {}, {\n        isTitle: true,\n        titleData: data\n      }));\n    } else {\n      data = getDefaultData(this.state.rawdata, getDate(this.state.searchDate));\n      const _data = data,\n            title = _data.title,\n            daily = _data.daily,\n            cumulative = _data.cumulative,\n            theaters = _data.theaters,\n            trend = _data.trend;\n      this.setState(_objectSpread({}, this.state, {}, {\n        isSearch: true,\n        currentDate: this.state.searchDate,\n        isTitle,\n        title,\n        daily,\n        cumulative,\n        theaters,\n        trend\n      }));\n    }\n  }\n\n  handleMovienameClick(event) {\n    // 1. 데이터 재처리\n    let clicked = event.target.getAttribute('data-title'),\n        date = this.state.isSearch ? getDate(this.state.searchDate) : getDate(this.state.currentDate),\n        trend = getTrendData(this.state.rawdata, clicked, date),\n        title = _objectSpread({}, this.state.title, {\n      trend: trend.title\n    }); //2. 재처리된 데이터 setState로 변경\n\n\n    this.setState(_objectSpread({}, this.state, {}, {\n      isLoading: false,\n      trend,\n      title\n    }));\n  }\n\n  handleButtonClick(value) {\n    let isAttendace = value === 'attendance' ? true : false,\n        today = getDate(new Date()),\n        defaultData = getDefaultData(this.state.rawdata, today, isAttendace);\n    const title = defaultData.title,\n          daily = defaultData.daily,\n          cumulative = defaultData.cumulative,\n          theaters = defaultData.theaters,\n          trend = defaultData.trend,\n          rawdata = defaultData.rawdata;\n    this.setState(_objectSpread({}, this.state, {}, {\n      isLoading: false,\n      isAttendace,\n      buttonValue: value,\n      title,\n      daily,\n      cumulative,\n      theaters,\n      trend,\n      rawdata\n    }));\n  }\n\n  componentDidMount() {\n    axios.get('../2019.json').then(response => {\n      let today = getDate(new Date()),\n          defaultData = getDefaultData(response.data.data, today);\n      const title = defaultData.title,\n            daily = defaultData.daily,\n            cumulative = defaultData.cumulative,\n            theaters = defaultData.theaters,\n            trend = defaultData.trend,\n            rawdata = defaultData.rawdata;\n      this.setState(_objectSpread({}, this.state, {}, {\n        isLoading: false,\n        title,\n        daily,\n        cumulative,\n        theaters,\n        trend,\n        rawdata\n      }));\n    }).catch(error => {\n      console.log('error', error);\n      this.setState(_objectSpread({}, this.state, {}, {\n        loadingMessage: React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, \"\\uB370\\uC774\\uD130 \\uB85C\\uB4DC \\uC911 \\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD558\\uC600\\uC2B5\\uB2C8\\uB2E4\")\n      }));\n    });\n  }\n\n  render() {\n    //const { isLoading, title, daily, cumulative, theaters, trend } = this.state;\n    const isTitle = this.state.isTitle,\n          dashboardData = _objectSpread({}, this.state),\n          dashboard = React.createElement(Dashboard, {\n      data: dashboardData,\n      change: this.handleMovienameClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }),\n          dashboardByTitle = React.createElement(DashboardByTitle, {\n      data: this.state.titleData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }); //loadingMessage =  <p className=\"mt-3\">데이터 로드 중입니다...</p>;\n\n\n    return React.createElement(React.Fragment, null, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(TopNav, {\n      dropdownTitle: this.state.dropdownTitle,\n      dropdownSelect: this.handleDropdownSelect,\n      searchDate: this.state.searchDate,\n      searchChange: this.handleSearchChange,\n      datePickerChange: this.handleDatePickerChange,\n      submit: this.handleSubmit,\n      buttonClick: this.handleButtonClick,\n      buttonValue: this.state.buttonValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), dashboardData.isLoading ? dashboardData.loadingMessage : isTitle ? dashboardByTitle : dashboard));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/VisualStudioCode/dashboard/src/App.js"],"names":["React","Component","Container","TopNav","Dashboard","DashboardByTitle","getDefaultData","getDate","getTrendData","getTitleData","axios","App","constructor","state","isAttendace","searchValue","buttonValue","titleData","searchDate","Date","setFullYear","getFullYear","currentDate","dropdownTitle","isLoading","isSearch","title","daily","cumulative","theaters","trend","rawdata","isTitle","loadingMessage","handleMovienameClick","bind","handleDropdownSelect","handleSearchChange","handleDatePickerChange","handleSubmit","handleButtonClick","event","setState","target","value","date","preventDefault","data","clicked","getAttribute","today","defaultData","componentDidMount","get","then","response","catch","error","console","log","render","dashboardData","dashboard","dashboardByTitle"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,cAAP,IAAyBC,OAAzB,EAAkCC,YAAlC,EAAgDC,YAAhD,QAAoE,yBAApE;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,GAAN,SAAkBV,SAAlB,CAA4B;AACxBW,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,IADJ;AAETC,MAAAA,WAAW,EAAE,EAFJ;AAGTC,MAAAA,WAAW,EAAE,IAHJ;AAITC,MAAAA,SAAS,EAAG,IAJH;AAKTC,MAAAA,UAAU,EAAE,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,WAAX,CAAuB,IAAID,IAAJ,GAAWE,WAAX,KAA2B,CAAlD,CAAT,CALH;AAMTC,MAAAA,WAAW,EAAE,IAAIH,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,WAAX,CAAuB,IAAID,IAAJ,GAAWE,WAAX,KAA2B,CAAlD,CAAT,CANJ;AAOTE,MAAAA,aAAa,EAAE,KAPN;AAQTC,MAAAA,SAAS,EAAE,IARF;AASTC,MAAAA,QAAQ,EAAE,KATD;AAUTC,MAAAA,KAAK,EAAE,IAVE;AAWTC,MAAAA,KAAK,EAAE,IAXE;AAYTC,MAAAA,UAAU,EAAE,IAZH;AAaTC,MAAAA,QAAQ,EAAE,IAbD;AAcTC,MAAAA,KAAK,EAAE,IAdE;AAeTC,MAAAA,OAAO,EAAG,IAfD;AAgBTC,MAAAA,OAAO,EAAE,KAhBA;AAiBTC,MAAAA,cAAc,EAAE;AAAG,QAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBP,KAAb;AAoBA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKE,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBF,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKG,sBAAL,GAA8B,KAAKA,sBAAL,CAA4BH,IAA5B,CAAiC,IAAjC,CAA9B;AACA,SAAKI,YAAL,GAAoB,KAAKA,YAAL,CAAkBJ,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKK,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBL,IAAvB,CAA4B,IAA5B,CAAzB;AACH;;AAEDC,EAAAA,oBAAoB,CAACK,KAAD,EAAQ;AACxB,UAAMlB,aAAa,GAAIkB,KAAK,KAAK,WAAX,GAA0B,KAA1B,GAAkC,IAAxD;AAEA,SAAKC,QAAL,mBACO,KAAK7B,KADZ,MACsB;AACdU,MAAAA;AADc,KADtB;AAKH;;AAEDc,EAAAA,kBAAkB,CAACI,KAAD,EAAQ;AACtB,SAAKC,QAAL,mBACM,KAAK7B,KADX,MACqB;AACdE,MAAAA,WAAW,EAAE0B,KAAK,CAACE,MAAN,CAAaC;AADZ,KADrB;AAKH;;AAEDN,EAAAA,sBAAsB,CAACO,IAAD,EAAO;AACzB,SAAKH,QAAL,mBACO,KAAK7B,KADZ,MACsB;AACdK,MAAAA,UAAU,EAAE2B;AADE,KADtB;AAKH;;AAEDN,EAAAA,YAAY,CAACE,KAAD,EAAQ;AAChBA,IAAAA,KAAK,CAACK,cAAN;AACA,UAAMd,OAAO,GAAG,KAAKnB,KAAL,CAAWU,aAAX,KAA6B,KAA7C;AACA,QAAIwB,IAAI,GAAG,IAAX;;AAEA,QAAIf,OAAJ,EAAc;AACVe,MAAAA,IAAI,GAAGtC,YAAY,CAAC,KAAKI,KAAL,CAAWkB,OAAZ,EAAqBxB,OAAO,CAAC,KAAKM,KAAL,CAAWS,WAAZ,CAA5B,EAAsD,KAAKT,KAAL,CAAWE,WAAjE,CAAnB;AACA,WAAK2B,QAAL,mBACO,KAAK7B,KADZ,MACsB;AACdmB,QAAAA,OAAO,EAAE,IADK;AAEdf,QAAAA,SAAS,EAAE8B;AAFG,OADtB;AAMH,KARD,MAQO;AACHA,MAAAA,IAAI,GAAGzC,cAAc,CAAC,KAAKO,KAAL,CAAWkB,OAAZ,EAAqBxB,OAAO,CAAC,KAAKM,KAAL,CAAWK,UAAZ,CAA5B,CAArB;AADG,oBAEmD6B,IAFnD;AAAA,YAEKrB,KAFL,SAEKA,KAFL;AAAA,YAEYC,KAFZ,SAEYA,KAFZ;AAAA,YAEmBC,UAFnB,SAEmBA,UAFnB;AAAA,YAE+BC,QAF/B,SAE+BA,QAF/B;AAAA,YAEyCC,KAFzC,SAEyCA,KAFzC;AAIH,WAAKY,QAAL,mBACO,KAAK7B,KADZ,MACsB;AACdY,QAAAA,QAAQ,EAAE,IADI;AAEdH,QAAAA,WAAW,EAAE,KAAKT,KAAL,CAAWK,UAFV;AAGdc,QAAAA,OAHc;AAIdN,QAAAA,KAJc;AAKdC,QAAAA,KALc;AAMdC,QAAAA,UANc;AAOdC,QAAAA,QAPc;AAQdC,QAAAA;AARc,OADtB;AAYH;AACJ;;AAEDI,EAAAA,oBAAoB,CAACO,KAAD,EAAQ;AACxB;AACA,QAAIO,OAAO,GAAGP,KAAK,CAACE,MAAN,CAAaM,YAAb,CAA0B,YAA1B,CAAd;AAAA,QACIJ,IAAI,GAAG,KAAKhC,KAAL,CAAWY,QAAX,GAAsBlB,OAAO,CAAC,KAAKM,KAAL,CAAWK,UAAZ,CAA7B,GAAuDX,OAAO,CAAC,KAAKM,KAAL,CAAWS,WAAZ,CADzE;AAAA,QAEIQ,KAAK,GAAGtB,YAAY,CAAC,KAAKK,KAAL,CAAWkB,OAAZ,EAAqBiB,OAArB,EAA8BH,IAA9B,CAFxB;AAAA,QAGInB,KAAK,qBAAQ,KAAKb,KAAL,CAAWa,KAAnB;AAA0BI,MAAAA,KAAK,EAAEA,KAAK,CAACJ;AAAvC,MAHT,CAFwB,CAOxB;;;AACA,SAAKgB,QAAL,mBACO,KAAK7B,KADZ,MACsB;AACdW,MAAAA,SAAS,EAAE,KADG;AAEdM,MAAAA,KAFc;AAGdJ,MAAAA;AAHc,KADtB;AAOH;;AAEDc,EAAAA,iBAAiB,CAACI,KAAD,EAAQ;AACrB,QAAI9B,WAAW,GAAK8B,KAAK,KAAK,YAAV,GAAyB,IAAzB,GAAgC,KAApD;AAAA,QACIM,KAAK,GAAG3C,OAAO,CAAC,IAAIY,IAAJ,EAAD,CADnB;AAAA,QAEIgC,WAAW,GAAG7C,cAAc,CAAC,KAAKO,KAAL,CAAWkB,OAAZ,EAAqBmB,KAArB,EAA4BpC,WAA5B,CAFhC;AAIA,UAAMY,KAAK,GAAGyB,WAAW,CAACzB,KAA1B;AAAA,UACQC,KAAK,GAAGwB,WAAW,CAACxB,KAD5B;AAAA,UAEQC,UAAU,GAAGuB,WAAW,CAACvB,UAFjC;AAAA,UAGQC,QAAQ,GAAIsB,WAAW,CAACtB,QAHhC;AAAA,UAIQC,KAAK,GAAGqB,WAAW,CAACrB,KAJ5B;AAAA,UAKQC,OAAO,GAAGoB,WAAW,CAACpB,OAL9B;AAOA,SAAKW,QAAL,mBACO,KAAK7B,KADZ,MACsB;AACdW,MAAAA,SAAS,EAAE,KADG;AAEdV,MAAAA,WAFc;AAGdE,MAAAA,WAAW,EAAE4B,KAHC;AAIdlB,MAAAA,KAJc;AAKdC,MAAAA,KALc;AAMdC,MAAAA,UANc;AAOdC,MAAAA,QAPc;AAQdC,MAAAA,KARc;AASdC,MAAAA;AATc,KADtB;AAaH;;AAEDqB,EAAAA,iBAAiB,GAAG;AAChB1C,IAAAA,KAAK,CAAC2C,GAAN,CAAU,cAAV,EACMC,IADN,CACYC,QAAQ,IAAI;AAChB,UAAIL,KAAK,GAAG3C,OAAO,CAAC,IAAIY,IAAJ,EAAD,CAAnB;AAAA,UACIgC,WAAW,GAAG7C,cAAc,CAACiD,QAAQ,CAACR,IAAT,CAAcA,IAAf,EAAqBG,KAArB,CADhC;AAGA,YAAMxB,KAAK,GAAGyB,WAAW,CAACzB,KAA1B;AAAA,YACMC,KAAK,GAAGwB,WAAW,CAACxB,KAD1B;AAAA,YAEMC,UAAU,GAAGuB,WAAW,CAACvB,UAF/B;AAAA,YAGMC,QAAQ,GAAIsB,WAAW,CAACtB,QAH9B;AAAA,YAIMC,KAAK,GAAGqB,WAAW,CAACrB,KAJ1B;AAAA,YAKMC,OAAO,GAAGoB,WAAW,CAACpB,OAL5B;AAOA,WAAKW,QAAL,mBACO,KAAK7B,KADZ,MACsB;AACdW,QAAAA,SAAS,EAAE,KADG;AAEdE,QAAAA,KAFc;AAGdC,QAAAA,KAHc;AAIdC,QAAAA,UAJc;AAKdC,QAAAA,QALc;AAMdC,QAAAA,KANc;AAOdC,QAAAA;AAPc,OADtB;AAWL,KAvBH,EAwBGyB,KAxBH,CAwBUC,KAAK,IAAI;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,WAAKf,QAAL,mBACO,KAAK7B,KADZ,MACsB;AACdoB,QAAAA,cAAc,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,OADtB;AAMH,KAhCH;AAiCH;;AAED2B,EAAAA,MAAM,GAAG;AACL;AACA,UAAM5B,OAAO,GAAG,KAAKnB,KAAL,CAAWmB,OAA3B;AAAA,UACM6B,aAAa,qBAAQ,KAAKhD,KAAb,CADnB;AAAA,UAEMiD,SAAS,GAAG,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAED,aAAjB;AAAgC,MAAA,MAAM,EAAE,KAAK3B,oBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFlB;AAAA,UAGM6B,gBAAgB,GAAG,oBAAC,gBAAD;AAAkB,MAAA,IAAI,EAAE,KAAKlD,KAAL,CAAWI,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHzB,CAFK,CAMC;;;AAEN,WACI,0CACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AACE,MAAA,aAAa,EAAE,KAAKJ,KAAL,CAAWU,aAD5B;AAEE,MAAA,cAAc,EAAE,KAAKa,oBAFvB;AAGE,MAAA,UAAU,EAAE,KAAKvB,KAAL,CAAWK,UAHzB;AAIE,MAAA,YAAY,EAAE,KAAKmB,kBAJrB;AAKE,MAAA,gBAAgB,EAAE,KAAKC,sBALzB;AAME,MAAA,MAAM,EAAE,KAAKC,YANf;AAOE,MAAA,WAAW,EAAE,KAAKC,iBAPpB;AAQE,MAAA,WAAW,EAAE,KAAK3B,KAAL,CAAWG,WAR1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAYM6C,aAAa,CAACrC,SAAd,GAA0BqC,aAAa,CAAC5B,cAAxC,GAA0DD,OAAO,GAAG+B,gBAAH,GAAsBD,SAZ7F,CADJ,CADJ;AAoBH;;AArMuB;;AAwM5B,eAAenD,GAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport TopNav from './components/TopNav';\r\nimport Dashboard from './components/Dashboard';\r\nimport DashboardByTitle from './components/DashboardByTitle';\r\nimport getDefaultData, { getDate, getTrendData, getTitleData } from './common/dataProcessing';\r\nimport axios from 'axios';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            isAttendace: true,\r\n            searchValue: '',\r\n            buttonValue: null,\r\n            titleData : null,\r\n            searchDate: new Date(new Date().setFullYear(new Date().getFullYear() - 1)),\r\n            currentDate: new Date(new Date().setFullYear(new Date().getFullYear() - 1)),\r\n            dropdownTitle: '영화명',\r\n            isLoading: true,\r\n            isSearch: false,\r\n            title: null,\r\n            daily: null,\r\n            cumulative: null,\r\n            theaters: null,\r\n            trend: null,\r\n            rawdata : null,\r\n            isTitle: false,\r\n            loadingMessage: <p className=\"mt-3\">데이터 로드 중입니다...</p>\r\n        };\r\n\r\n        this.handleMovienameClick = this.handleMovienameClick.bind(this);\r\n        this.handleDropdownSelect = this.handleDropdownSelect.bind(this);\r\n        this.handleSearchChange = this.handleSearchChange.bind(this);\r\n        this.handleDatePickerChange = this.handleDatePickerChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleButtonClick = this.handleButtonClick.bind(this);\r\n    }\r\n\r\n    handleDropdownSelect(event) {\r\n        const dropdownTitle = (event === \"movieName\") ? \"영화명\" : \"날짜\";\r\n\r\n        this.setState({\r\n            ...this.state, ...{\r\n                dropdownTitle\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSearchChange(event) {\r\n        this.setState({\r\n           ...this.state, ...{ \r\n               searchValue: event.target.value\r\n           }\r\n        });\r\n    }\r\n\r\n    handleDatePickerChange(date) {\r\n        this.setState({\r\n            ...this.state, ...{\r\n                searchDate: date\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const isTitle = this.state.dropdownTitle === \"영화명\";\r\n        let data = null;\r\n        \r\n        if( isTitle ) {\r\n            data = getTitleData(this.state.rawdata, getDate(this.state.currentDate), this.state.searchValue);\r\n            this.setState({\r\n                ...this.state, ...{\r\n                    isTitle: true,\r\n                    titleData: data\r\n                }\r\n            });\r\n        } else {\r\n            data = getDefaultData(this.state.rawdata, getDate(this.state.searchDate));\r\n            const { title, daily, cumulative, theaters, trend } = data;\r\n        \r\n            this.setState({\r\n                ...this.state, ...{\r\n                    isSearch: true,\r\n                    currentDate: this.state.searchDate,\r\n                    isTitle,\r\n                    title,\r\n                    daily,\r\n                    cumulative,\r\n                    theaters,\r\n                    trend\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleMovienameClick(event) {\r\n        // 1. 데이터 재처리\r\n        let clicked = event.target.getAttribute('data-title'),\r\n            date = this.state.isSearch ? getDate(this.state.searchDate) : getDate(this.state.currentDate),\r\n            trend = getTrendData(this.state.rawdata, clicked, date),\r\n            title = { ...this.state.title, trend: trend.title };\r\n \r\n        //2. 재처리된 데이터 setState로 변경\r\n        this.setState({\r\n            ...this.state, ...{\r\n                isLoading: false,\r\n                trend,\r\n                title\r\n            }\r\n        });\r\n    }\r\n\r\n    handleButtonClick(value) {\r\n        let isAttendace = ( value === 'attendance' ? true : false ),\r\n            today = getDate(new Date()),\r\n            defaultData = getDefaultData(this.state.rawdata, today, isAttendace);\r\n\r\n        const title = defaultData.title,\r\n                daily = defaultData.daily,\r\n                cumulative = defaultData.cumulative,\r\n                theaters  = defaultData.theaters,\r\n                trend = defaultData.trend,\r\n                rawdata = defaultData.rawdata;\r\n    \r\n        this.setState({\r\n            ...this.state, ...{\r\n                isLoading: false,\r\n                isAttendace,\r\n                buttonValue: value,\r\n                title,\r\n                daily,\r\n                cumulative,\r\n                theaters,\r\n                trend,\r\n                rawdata\r\n            }\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('../2019.json')\r\n             .then( response => {\r\n                let today = getDate(new Date()),\r\n                    defaultData = getDefaultData(response.data.data, today);\r\n\r\n                const title = defaultData.title,\r\n                      daily = defaultData.daily,\r\n                      cumulative = defaultData.cumulative,\r\n                      theaters  = defaultData.theaters,\r\n                      trend = defaultData.trend,\r\n                      rawdata = defaultData.rawdata;\r\n            \r\n                this.setState({\r\n                    ...this.state, ...{\r\n                        isLoading: false,\r\n                        title,\r\n                        daily,\r\n                        cumulative,\r\n                        theaters,\r\n                        trend,\r\n                        rawdata\r\n                    }\r\n                });\r\n          })\r\n          .catch( error => {\r\n              console.log('error', error);\r\n              this.setState({\r\n                  ...this.state, ...{\r\n                      loadingMessage: <p>데이터 로드 중 에러가 발생하였습니다</p>\r\n                  }\r\n              })\r\n\r\n          });\r\n    }\r\n\r\n    render() {\r\n        //const { isLoading, title, daily, cumulative, theaters, trend } = this.state;\r\n        const isTitle = this.state.isTitle,\r\n              dashboardData = { ...this.state },\r\n              dashboard = <Dashboard data={dashboardData} change={this.handleMovienameClick} />,\r\n              dashboardByTitle = <DashboardByTitle data={this.state.titleData} />;\r\n              //loadingMessage =  <p className=\"mt-3\">데이터 로드 중입니다...</p>;\r\n\r\n        return (\r\n            <>  \r\n                <Container>\r\n                    <TopNav\r\n                      dropdownTitle={this.state.dropdownTitle}\r\n                      dropdownSelect={this.handleDropdownSelect}\r\n                      searchDate={this.state.searchDate}\r\n                      searchChange={this.handleSearchChange}\r\n                      datePickerChange={this.handleDatePickerChange}\r\n                      submit={this.handleSubmit}\r\n                      buttonClick={this.handleButtonClick}\r\n                      buttonValue={this.state.buttonValue}\r\n                    />\r\n                    \r\n                    { dashboardData.isLoading ? dashboardData.loadingMessage : (isTitle ? dashboardByTitle : dashboard) }\r\n                    {/* { isTitle ? dashboardByTitle : dashboard } */}\r\n                    \r\n                </Container>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}