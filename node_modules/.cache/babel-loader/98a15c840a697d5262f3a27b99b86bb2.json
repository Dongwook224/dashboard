{"ast":null,"code":"const getDefaultData = (data, date) => {\n  let defaultData = {\n    title: {\n      date,\n      daily: \"관객수\",\n      cumulative: \"누적관객수\",\n      theaters: \"상영관수\",\n      trend: \"\"\n    },\n    daily: [],\n    cumulative: [],\n    theaters: [],\n    trend: null,\n    rawdata: data.data.data\n  };\n  let movieName = [],\n      targetMovies = [];\n  let rawdata = data.data.data,\n      targetData = rawdata.filter(data => data.date === date); // 1. daily,\n\n  for (let i = 0; i < 5; i++) {\n    let daily = {\n      movieCode: `daily${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiCnt\n    },\n        tempObject = {\n      name: targetData[i].movieNm,\n      data: []\n    };\n    defaultData['daily'].push(daily);\n    movieName.push(tempObject);\n    targetMovies.push(targetData[i].movieNm);\n  } // 2. cumulative\n\n\n  targetData.sort((a, b) => b.audiAcc - a.audiAcc);\n\n  for (let i = 0; i < 5; i++) {\n    let cumulative = {\n      movieCode: `cumulative${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiAcc\n    };\n    defaultData['cumulative'].push(cumulative);\n  } // 3. theaters\n\n\n  targetData.sort((a, b) => b.scrnCnt - a.scrnCnt);\n\n  for (let i = 0; i < 5; i++) {\n    let theaters = [targetData[i].movieNm, targetData[i].scrnCnt];\n    defaultData['theaters'].push(theaters);\n  } // 4. Trend\n\n\n  defaultData.trend = getTrendData(rawdata, defaultData.daily[0].movieCode);\n  defaultData.title.trend = defaultData.trend.title;\n  return defaultData;\n};\n\nconst getTrendData = (rawdata, clicked) => {\n  let trendData = null,\n      categories = [],\n      series = [],\n      data = [],\n      filtered = null,\n      targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\n      dataType = clicked.replace(/[0-9]*/g, \"\"),\n      today = getDate(0),\n      lastIndex = 0,\n      value = '',\n      title = ''; // rawdata에서 clicked영화만 추출\n\n  filtered = rawdata.filter(rawdata => rawdata.movieCd === targetMovieCode); // filter를 오늘까지 자름\n\n  lastIndex = filtered.findIndex(filtered => filtered.date === today);\n  value = dataType === \"daily\" ? \"audiCnt\" : \"audiAcc\";\n  title = dataType === \"daily\" ? `${filtered[0].movieNm} 일별 관객수` : `${filtered[0].movieNm} 일별 누적관객`;\n\n  for (let i = 0; i <= lastIndex; i++) {\n    //let date = filtered[i].date.replace(/^\\d{4}/, ''),\n    //    formmattedDate = `${date.substr(0, 2)}.${date.substr(2, 3)}.`;\n    let formattedDate = getTrendDate(filtered[i].date);\n    categories.push(formattedDate); // x축 날짜 데이터 삽입\n\n    data.push(filtered[i][value]);\n  } // trend data구조에 맞게 처리\n\n\n  series.push({\n    name: filtered[0].movieNm,\n    data\n  });\n  trendData = {\n    categories,\n    series,\n    title\n  }; // return trend data\n\n  return trendData;\n};\n\nconst getTrendDate = date => {\n  // 1. date포맷 변경: \"20190101\" -> \"2019-01-01\" \n  let year = date.substr(0, 4),\n      month = date.substr(4, 2),\n      day = date.substr(6, 5),\n      formattedDate = `${year}-${month}-${day}`; // 2. Date 객체 생성\n\n  let dateObject = new Date(formattedDate); // 3. getDay로 요일 생성\n\n  let weekday = dateObject.getDay();\n  let weekdayArray = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"]; // 4. 요일 + 달.일 형식으로 변경\n\n  let result = `${weekdayArray[weekday]}<br />${month}.${day}.`;\n  return result;\n};\n\nconst getDate = i => {\n  let date = new Date();\n  date.setDate(date.getDate() + i);\n  let month = '' + (date.getMonth() + 1),\n      day = '' + date.getDate(),\n      year = date.getFullYear() - 1;\n\n  if (month.length < 2) {\n    month = '0' + month;\n  }\n\n  if (day.length < 2) {\n    day = '0' + day;\n  }\n\n  return [year, month, day].join('');\n};\n\nexport default getDefaultData;\nexport { getTrendData, getDate };","map":{"version":3,"sources":["D:/VisualStudioCode/dashboard/src/common/dataProcessing.js"],"names":["getDefaultData","data","date","defaultData","title","daily","cumulative","theaters","trend","rawdata","movieName","targetMovies","targetData","filter","i","movieCode","movieCd","movieNm","value","audiCnt","tempObject","name","push","sort","a","b","audiAcc","scrnCnt","getTrendData","clicked","trendData","categories","series","filtered","targetMovieCode","replace","dataType","today","getDate","lastIndex","findIndex","formattedDate","getTrendDate","year","substr","month","day","dateObject","Date","weekday","getDay","weekdayArray","result","setDate","getMonth","getFullYear","length","join"],"mappings":"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","sourcesContent":["\r\nconst getDefaultData = (data, date) => {\r\n    let defaultData = {\r\n        title: { date, daily: \"관객수\", cumulative: \"누적관객수\", theaters: \"상영관수\", trend: \"\" },\r\n        daily: [],\r\n        cumulative: [],\r\n        theaters: [],\r\n        trend: null,\r\n        rawdata: data.data.data,\r\n    }\r\n\r\n    let movieName = [],\r\n        targetMovies = [];\r\n\r\n    let rawdata = data.data.data,\r\n        targetData = rawdata.filter( data => data.date === date );\r\n   \r\n    // 1. daily,\r\n    for( let i = 0; i < 5; i++ ) {\r\n        let daily = { movieCode: `daily${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i].audiCnt },\r\n            tempObject = { name: targetData[i].movieNm, data: [] };\r\n        \r\n        defaultData['daily'].push(daily);\r\n\r\n        movieName.push(tempObject);\r\n        targetMovies.push(targetData[i].movieNm);\r\n    }\r\n\r\n    // 2. cumulative\r\n    targetData.sort((a, b) => b.audiAcc - a.audiAcc);\r\n    for ( let i = 0; i < 5; i++ ) {\r\n        let cumulative = { movieCode: `cumulative${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i].audiAcc };\r\n        defaultData['cumulative'].push(cumulative);\r\n    }\r\n\r\n    // 3. theaters\r\n    targetData.sort((a, b) => b.scrnCnt - a.scrnCnt);\r\n    for( let i = 0; i < 5; i++ ) {\r\n        let theaters = [ targetData[i].movieNm, targetData[i].scrnCnt ];\r\n        defaultData['theaters'].push(theaters);\r\n    }\r\n\r\n    // 4. Trend\r\n    defaultData.trend = getTrendData(rawdata, defaultData.daily[0].movieCode);\r\n    defaultData.title.trend = defaultData.trend.title;\r\n   \r\n    return defaultData;\r\n}\r\n\r\nconst getTrendData = (rawdata, clicked) => {\r\n    let trendData = null,\r\n        categories = [],\r\n        series = [],\r\n        data = [],\r\n        filtered = null,\r\n        targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\r\n        dataType = clicked.replace(/[0-9]*/g, \"\"),\r\n        today = getDate(0),\r\n        lastIndex = 0,\r\n        value = '',\r\n        title = '';\r\n \r\n    // rawdata에서 clicked영화만 추출\r\n    filtered = rawdata.filter( rawdata => rawdata.movieCd === targetMovieCode );\r\n\r\n    // filter를 오늘까지 자름\r\n    lastIndex = filtered.findIndex( filtered => filtered.date === today );\r\n    value = dataType === \"daily\" ? \"audiCnt\" : \"audiAcc\";\r\n    title = dataType === \"daily\" ? `${filtered[0].movieNm} 일별 관객수` : `${filtered[0].movieNm} 일별 누적관객`\r\n\r\n    for(let i = 0; i <= lastIndex; i++) {\r\n        //let date = filtered[i].date.replace(/^\\d{4}/, ''),\r\n        //    formmattedDate = `${date.substr(0, 2)}.${date.substr(2, 3)}.`;\r\n        let formattedDate = getTrendDate(filtered[i].date);\r\n\r\n        categories.push(formattedDate); // x축 날짜 데이터 삽입\r\n        data.push(filtered[i][value]);\r\n    }\r\n\r\n    // trend data구조에 맞게 처리\r\n    series.push({ name: filtered[0].movieNm, data });\r\n    trendData = { categories, series, title };\r\n\r\n    // return trend data\r\n    return trendData;\r\n}\r\n\r\nconst getTrendDate = (date) => {\r\n    // 1. date포맷 변경: \"20190101\" -> \"2019-01-01\" \r\n    let year = date.substr(0, 4),\r\n        month = date.substr(4, 2),\r\n        day = date.substr(6, 5),\r\n        formattedDate = `${year}-${month}-${day}`;\r\n    \r\n    // 2. Date 객체 생성\r\n    let dateObject = new Date(formattedDate);\r\n\r\n    // 3. getDay로 요일 생성\r\n    let weekday = dateObject.getDay();\r\n    let weekdayArray = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\r\n\r\n    // 4. 요일 + 달.일 형식으로 변경\r\n    let result = `${weekdayArray[weekday]}<br />${month}.${day}.`;\r\n\r\n    return result;\r\n}\r\n\r\nconst getDate = (i) => {\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + i);\r\n\r\n    let month = '' + (date.getMonth() + 1),\r\n        day = '' + date.getDate(),\r\n        year = date.getFullYear() - 1;\r\n    \r\n    if (month.length < 2) {\r\n        month = '0' + month;\r\n    }\r\n\r\n    if (day.length < 2) {\r\n        day = '0' + day;\r\n    }\r\n\r\n    return [year, month, day].join('');\r\n}\r\n\r\nexport default getDefaultData;\r\nexport { getTrendData, getDate };"]},"metadata":{},"sourceType":"module"}