{"ast":null,"code":"const getTitleData = (rawdata, date, movieName) => {\n  let titleData = [],\n      filtered = rawdata.filter(data => data.movieNm === movieName);\n\n  if (filtered.length === 0) {\n    return null;\n  }\n\n  filtered.forEach(data => {\n    const rank = data.rank,\n          movieNm = data.movieNm,\n          movieCd = data.movieCd,\n          openDt = data.openDt,\n          salesAmt = data.salesAmt,\n          salesAcc = data.salesAcc,\n          audiCnt = data.audiCnt,\n          audiAcc = data.audiAcc,\n          scrnCnt = data.scrnCnt,\n          showcnt = data.showcnt,\n          date = data.date;\n    const tempObj = {\n      rank,\n      movieNm,\n      movieCd,\n      openDt,\n      salesAmt,\n      salesAcc,\n      audiCnt,\n      audiAcc,\n      scrnCnt,\n      showcnt,\n      date\n    };\n    titleData.push(tempObj);\n  });\n  return titleData;\n};\n\nconst getDefaultData = (data, date, isAttendance = true) => {\n  let defaultData = {\n    title: {\n      date,\n      daily: \"관객수\",\n      cumulative: \"누적관객수\",\n      theaters: \"상영관수\",\n      trend: \"\"\n    },\n    daily: [],\n    cumulative: [],\n    theaters: [],\n    trend: null,\n    rawdata: data\n  };\n  let movieName = [],\n      targetMovies = [],\n      rawdata = data,\n      targetData = rawdata.filter(data => data.date === date),\n      dataKey = isAttendance ? audiCnt : salesAmt; // 1. daily,\n\n  for (let i = 0; i < 5; i++) {\n    let daily = {\n      movieCode: `daily${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i][dataKey].toLocaleString()\n    },\n        tempObject = {\n      name: targetData[i].movieNm,\n      data: []\n    };\n    defaultData['daily'].push(daily);\n    movieName.push(tempObject);\n    targetMovies.push(targetData[i].movieNm);\n  }\n\n  dataKey = isAttendance ? audiAcc : salesAcc; // 2. cumulative\n\n  targetData.sort((a, b) => b[dataKey] - a[dataKey]);\n\n  for (let i = 0; i < 5; i++) {\n    let cumulative = {\n      movieCode: `cumulative${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i][dataKey].toLocaleString()\n    };\n    defaultData['cumulative'].push(cumulative);\n  } // 3. theaters\n\n\n  targetData.sort((a, b) => b.scrnCnt - a.scrnCnt);\n\n  for (let i = 0; i < 5; i++) {\n    let theaters = {\n      name: targetData[i].movieNm,\n      y: targetData[i].scrnCnt\n    };\n    defaultData['theaters'].push(theaters);\n  } // 4. Trend\n\n\n  defaultData.trend = getTrendData(rawdata, defaultData.daily[0].movieCode, date);\n  defaultData.title.trend = defaultData.trend.title;\n  return defaultData;\n};\n\nconst getTrendData = (rawdata, clicked, date) => {\n  let trendData = null,\n      categories = [],\n      series = [],\n      data = [],\n      filtered = null,\n      targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\n      dataType = clicked.replace(/[0-9]*/g, \"\"),\n      lastIndex = 0,\n      value = '',\n      title = '',\n      releaseDate = ''; // rawdata에서 clicked영화만 추출\n\n  filtered = rawdata.filter(rawdata => rawdata.movieCd === targetMovieCode); // filter를 오늘까지 자름\n\n  lastIndex = filtered.findIndex(filtered => filtered.date === date);\n  value = dataType === \"daily\" ? \"audiCnt\" : \"audiAcc\";\n  title = dataType === \"daily\" ? `${filtered[0].movieNm} 일별 관객수` : `${filtered[0].movieNm} 일별 누적관객수`;\n  releaseDate = filtered[0].openDt.replace(/-/g, '');\n\n  for (let i = 0; i <= lastIndex; i++) {\n    let formattedDate = getTrendDate(filtered[i].date),\n        //seriesData = ( filtered[i].date !== releaseDate ) ? {y: filtered[i][value] } :  { y: filtered[i][value], id: 'annotation' };\n    seriesData = filtered[i][value];\n    categories.push(formattedDate); // x축 날짜 데이터 삽입\n\n    data.push(seriesData);\n  } // trend data구조에 맞게 처리\n\n\n  series.push({\n    name: filtered[0].movieNm,\n    data\n  });\n  trendData = {\n    categories,\n    series,\n    title\n  }; // return trend data\n\n  return trendData;\n};\n\nconst getTrendDate = date => {\n  // 1. date포맷 변경: \"20190101\" -> \"2019-01-01\" \n  let year = date.substr(0, 4),\n      month = date.substr(4, 2),\n      day = date.substr(6, 5),\n      formattedDate = `${year}-${month}-${day}`; // 2. Date 객체 생성\n\n  let dateObject = new Date(formattedDate); // 3. getDay로 요일 생성\n\n  let weekday = dateObject.getDay();\n  let weekdayArray = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"]; // 4. 요일 + 달.일 형식으로 변경\n\n  let result = `${month}.${day} <br /> ${weekdayArray[weekday]}`;\n  return result;\n};\n\nconst getDate = date => {\n  //let date = new Date();\n  //date.setDate(date.getDate() + i);\n  let isNow = date.getFullYear() === 2020,\n      month = '' + (date.getMonth() + 1),\n      day = '' + date.getDate(),\n      year = isNow ? date.getFullYear() - 1 : date.getFullYear();\n\n  if (month.length < 2) {\n    month = '0' + month;\n  }\n\n  if (day.length < 2) {\n    day = '0' + day;\n  }\n\n  return [year, month, day].join('');\n};\n\nconst getSearchResultData = movieName => {\n  console.log('dataprocessing', movieName);\n};\n\nexport default getDefaultData;\nexport { getTrendData, getDate, getSearchResultData, getTitleData };","map":{"version":3,"sources":["D:/VisualStudioCode/dashboard/src/common/dataProcessing.js"],"names":["getTitleData","rawdata","date","movieName","titleData","filtered","filter","data","movieNm","length","forEach","rank","movieCd","openDt","salesAmt","salesAcc","audiCnt","audiAcc","scrnCnt","showcnt","tempObj","push","getDefaultData","isAttendance","defaultData","title","daily","cumulative","theaters","trend","targetMovies","targetData","dataKey","i","movieCode","value","toLocaleString","tempObject","name","sort","a","b","y","getTrendData","clicked","trendData","categories","series","targetMovieCode","replace","dataType","lastIndex","releaseDate","findIndex","formattedDate","getTrendDate","seriesData","year","substr","month","day","dateObject","Date","weekday","getDay","weekdayArray","result","getDate","isNow","getFullYear","getMonth","join","getSearchResultData","console","log"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CAACC,OAAD,EAAUC,IAAV,EAAgBC,SAAhB,KAA8B;AAC/C,MAAIC,SAAS,GAAG,EAAhB;AAAA,MACIC,QAAQ,GAAGJ,OAAO,CAACK,MAAR,CAAgBC,IAAI,IAAIA,IAAI,CAACC,OAAL,KAAiBL,SAAzC,CADf;;AAEA,MAAKE,QAAQ,CAACI,MAAT,KAAoB,CAAzB,EAA6B;AACzB,WAAO,IAAP;AACH;;AAEDJ,EAAAA,QAAQ,CAACK,OAAT,CAAkBH,IAAI,IAAI;AAAA,UACdI,IADc,GACmFJ,IADnF,CACdI,IADc;AAAA,UACRH,OADQ,GACmFD,IADnF,CACRC,OADQ;AAAA,UACCI,OADD,GACmFL,IADnF,CACCK,OADD;AAAA,UACUC,MADV,GACmFN,IADnF,CACUM,MADV;AAAA,UACkBC,QADlB,GACmFP,IADnF,CACkBO,QADlB;AAAA,UAC4BC,QAD5B,GACmFR,IADnF,CAC4BQ,QAD5B;AAAA,UACsCC,OADtC,GACmFT,IADnF,CACsCS,OADtC;AAAA,UAC+CC,OAD/C,GACmFV,IADnF,CAC+CU,OAD/C;AAAA,UACwDC,OADxD,GACmFX,IADnF,CACwDW,OADxD;AAAA,UACiEC,OADjE,GACmFZ,IADnF,CACiEY,OADjE;AAAA,UAC0EjB,IAD1E,GACmFK,IADnF,CAC0EL,IAD1E;AAEtB,UAAMkB,OAAO,GAAG;AAAET,MAAAA,IAAF;AAAQH,MAAAA,OAAR;AAAiBI,MAAAA,OAAjB;AAA0BC,MAAAA,MAA1B;AAAkCC,MAAAA,QAAlC;AAA4CC,MAAAA,QAA5C;AAAsDC,MAAAA,OAAtD;AAA+DC,MAAAA,OAA/D;AAAwEC,MAAAA,OAAxE;AAAiFC,MAAAA,OAAjF;AAA0FjB,MAAAA;AAA1F,KAAhB;AACAE,IAAAA,SAAS,CAACiB,IAAV,CAAeD,OAAf;AACH,GAJD;AAMA,SAAOhB,SAAP;AACH,CAdD;;AAgBA,MAAMkB,cAAc,GAAG,CAACf,IAAD,EAAOL,IAAP,EAAaqB,YAAY,GAAG,IAA5B,KAAqC;AACxD,MAAIC,WAAW,GAAG;AACdC,IAAAA,KAAK,EAAE;AAAEvB,MAAAA,IAAF;AAAQwB,MAAAA,KAAK,EAAE,KAAf;AAAsBC,MAAAA,UAAU,EAAE,OAAlC;AAA2CC,MAAAA,QAAQ,EAAE,MAArD;AAA6DC,MAAAA,KAAK,EAAE;AAApE,KADO;AAEdH,IAAAA,KAAK,EAAE,EAFO;AAGdC,IAAAA,UAAU,EAAE,EAHE;AAIdC,IAAAA,QAAQ,EAAE,EAJI;AAKdC,IAAAA,KAAK,EAAE,IALO;AAMd5B,IAAAA,OAAO,EAAEM;AANK,GAAlB;AASA,MAAIJ,SAAS,GAAG,EAAhB;AAAA,MACI2B,YAAY,GAAG,EADnB;AAAA,MAEI7B,OAAO,GAAGM,IAFd;AAAA,MAGIwB,UAAU,GAAG9B,OAAO,CAACK,MAAR,CAAgBC,IAAI,IAAIA,IAAI,CAACL,IAAL,KAAcA,IAAtC,CAHjB;AAAA,MAII8B,OAAO,GAAGT,YAAY,GAAGP,OAAH,GAAaF,QAJvC,CAVwD,CAgBxD;;AACA,OAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA6B;AACzB,QAAIP,KAAK,GAAG;AAAEQ,MAAAA,SAAS,EAAG,QAAOH,UAAU,CAACE,CAAD,CAAV,CAAcrB,OAAQ,EAA3C;AAA8CT,MAAAA,SAAS,EAAE4B,UAAU,CAACE,CAAD,CAAV,CAAczB,OAAvE;AAAgF2B,MAAAA,KAAK,EAAEJ,UAAU,CAACE,CAAD,CAAV,CAAcD,OAAd,EAAuBI,cAAvB;AAAvF,KAAZ;AAAA,QACIC,UAAU,GAAG;AAAEC,MAAAA,IAAI,EAAEP,UAAU,CAACE,CAAD,CAAV,CAAczB,OAAtB;AAA+BD,MAAAA,IAAI,EAAE;AAArC,KADjB;AAGAiB,IAAAA,WAAW,CAAC,OAAD,CAAX,CAAqBH,IAArB,CAA0BK,KAA1B;AAEAvB,IAAAA,SAAS,CAACkB,IAAV,CAAegB,UAAf;AACAP,IAAAA,YAAY,CAACT,IAAb,CAAkBU,UAAU,CAACE,CAAD,CAAV,CAAczB,OAAhC;AACH;;AACDwB,EAAAA,OAAO,GAAGT,YAAY,GAAGN,OAAH,GAAaF,QAAnC,CA1BwD,CA2BxD;;AACAgB,EAAAA,UAAU,CAACQ,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACT,OAAD,CAAD,GAAaQ,CAAC,CAACR,OAAD,CAAxC;;AACA,OAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA8B;AAC1B,QAAIN,UAAU,GAAG;AAAEO,MAAAA,SAAS,EAAG,aAAYH,UAAU,CAACE,CAAD,CAAV,CAAcrB,OAAQ,EAAhD;AAAmDT,MAAAA,SAAS,EAAE4B,UAAU,CAACE,CAAD,CAAV,CAAczB,OAA5E;AAAqF2B,MAAAA,KAAK,EAAEJ,UAAU,CAACE,CAAD,CAAV,CAAcD,OAAd,EAAuBI,cAAvB;AAA5F,KAAjB;AACAZ,IAAAA,WAAW,CAAC,YAAD,CAAX,CAA0BH,IAA1B,CAA+BM,UAA/B;AACH,GAhCuD,CAkCxD;;;AACAI,EAAAA,UAAU,CAACQ,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACvB,OAAF,GAAYsB,CAAC,CAACtB,OAAxC;;AACA,OAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA6B;AACzB,QAAIL,QAAQ,GAAG;AAAEU,MAAAA,IAAI,EAAEP,UAAU,CAACE,CAAD,CAAV,CAAczB,OAAtB;AAA+BkC,MAAAA,CAAC,EAAEX,UAAU,CAACE,CAAD,CAAV,CAAcf;AAAhD,KAAf;AACAM,IAAAA,WAAW,CAAC,UAAD,CAAX,CAAwBH,IAAxB,CAA6BO,QAA7B;AACH,GAvCuD,CAyCxD;;;AACAJ,EAAAA,WAAW,CAACK,KAAZ,GAAoBc,YAAY,CAAC1C,OAAD,EAAUuB,WAAW,CAACE,KAAZ,CAAkB,CAAlB,EAAqBQ,SAA/B,EAA0ChC,IAA1C,CAAhC;AACAsB,EAAAA,WAAW,CAACC,KAAZ,CAAkBI,KAAlB,GAA0BL,WAAW,CAACK,KAAZ,CAAkBJ,KAA5C;AAEA,SAAOD,WAAP;AACH,CA9CD;;AAgDA,MAAMmB,YAAY,GAAG,CAAC1C,OAAD,EAAU2C,OAAV,EAAmB1C,IAAnB,KAA4B;AAC7C,MAAI2C,SAAS,GAAG,IAAhB;AAAA,MACIC,UAAU,GAAG,EADjB;AAAA,MAEIC,MAAM,GAAG,EAFb;AAAA,MAGIxC,IAAI,GAAG,EAHX;AAAA,MAIIF,QAAQ,GAAG,IAJf;AAAA,MAKI2C,eAAe,GAAGJ,OAAO,CAACK,OAAR,CAAgB,mBAAhB,EAAqC,EAArC,CALtB;AAAA,MAMIC,QAAQ,GAAGN,OAAO,CAACK,OAAR,CAAgB,SAAhB,EAA2B,EAA3B,CANf;AAAA,MAOIE,SAAS,GAAG,CAPhB;AAAA,MAQIhB,KAAK,GAAG,EARZ;AAAA,MASIV,KAAK,GAAG,EATZ;AAAA,MAUI2B,WAAW,GAAG,EAVlB,CAD6C,CAa7C;;AACA/C,EAAAA,QAAQ,GAAGJ,OAAO,CAACK,MAAR,CAAgBL,OAAO,IAAIA,OAAO,CAACW,OAAR,KAAoBoC,eAA/C,CAAX,CAd6C,CAgB7C;;AACAG,EAAAA,SAAS,GAAG9C,QAAQ,CAACgD,SAAT,CAAoBhD,QAAQ,IAAIA,QAAQ,CAACH,IAAT,KAAkBA,IAAlD,CAAZ;AACAiC,EAAAA,KAAK,GAAGe,QAAQ,KAAK,OAAb,GAAuB,SAAvB,GAAmC,SAA3C;AACAzB,EAAAA,KAAK,GAAGyB,QAAQ,KAAK,OAAb,GAAwB,GAAE7C,QAAQ,CAAC,CAAD,CAAR,CAAYG,OAAQ,SAA9C,GAA0D,GAAEH,QAAQ,CAAC,CAAD,CAAR,CAAYG,OAAQ,WAAxF;AACA4C,EAAAA,WAAW,GAAG/C,QAAQ,CAAC,CAAD,CAAR,CAAYQ,MAAZ,CAAmBoC,OAAnB,CAA2B,IAA3B,EAAiC,EAAjC,CAAd;;AAEA,OAAI,IAAIhB,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAIkB,SAApB,EAA+BlB,CAAC,EAAhC,EAAoC;AAChC,QAAIqB,aAAa,GAAGC,YAAY,CAAClD,QAAQ,CAAC4B,CAAD,CAAR,CAAY/B,IAAb,CAAhC;AAAA,QACI;AACAsD,IAAAA,UAAU,GAAGnD,QAAQ,CAAC4B,CAAD,CAAR,CAAYE,KAAZ,CAFjB;AAIAW,IAAAA,UAAU,CAACzB,IAAX,CAAgBiC,aAAhB,EALgC,CAKA;;AAChC/C,IAAAA,IAAI,CAACc,IAAL,CAAUmC,UAAV;AACH,GA7B4C,CA+B7C;;;AACAT,EAAAA,MAAM,CAAC1B,IAAP,CAAY;AAAEiB,IAAAA,IAAI,EAAEjC,QAAQ,CAAC,CAAD,CAAR,CAAYG,OAApB;AAA6BD,IAAAA;AAA7B,GAAZ;AACAsC,EAAAA,SAAS,GAAG;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBtB,IAAAA;AAAtB,GAAZ,CAjC6C,CAmC7C;;AACA,SAAOoB,SAAP;AACH,CArCD;;AAuCA,MAAMU,YAAY,GAAIrD,IAAD,IAAU;AAC3B;AACA,MAAIuD,IAAI,GAAGvD,IAAI,CAACwD,MAAL,CAAY,CAAZ,EAAe,CAAf,CAAX;AAAA,MACIC,KAAK,GAAGzD,IAAI,CAACwD,MAAL,CAAY,CAAZ,EAAe,CAAf,CADZ;AAAA,MAEIE,GAAG,GAAG1D,IAAI,CAACwD,MAAL,CAAY,CAAZ,EAAe,CAAf,CAFV;AAAA,MAGIJ,aAAa,GAAI,GAAEG,IAAK,IAAGE,KAAM,IAAGC,GAAI,EAH5C,CAF2B,CAO3B;;AACA,MAAIC,UAAU,GAAG,IAAIC,IAAJ,CAASR,aAAT,CAAjB,CAR2B,CAU3B;;AACA,MAAIS,OAAO,GAAGF,UAAU,CAACG,MAAX,EAAd;AACA,MAAIC,YAAY,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAAnB,CAZ2B,CAc3B;;AACA,MAAIC,MAAM,GAAI,GAAEP,KAAM,IAAGC,GAAI,WAAUK,YAAY,CAACF,OAAD,CAAU,EAA7D;AAEA,SAAOG,MAAP;AACH,CAlBD;;AAoBA,MAAMC,OAAO,GAAIjE,IAAD,IAAU;AACtB;AACA;AACA,MAAIkE,KAAK,GAAIlE,IAAI,CAACmE,WAAL,OAAuB,IAApC;AAAA,MACIV,KAAK,GAAG,MAAMzD,IAAI,CAACoE,QAAL,KAAkB,CAAxB,CADZ;AAAA,MAEIV,GAAG,GAAG,KAAK1D,IAAI,CAACiE,OAAL,EAFf;AAAA,MAGIV,IAAI,GAAGW,KAAK,GAAGlE,IAAI,CAACmE,WAAL,KAAqB,CAAxB,GAA4BnE,IAAI,CAACmE,WAAL,EAH5C;;AAKA,MAAIV,KAAK,CAAClD,MAAN,GAAe,CAAnB,EAAsB;AAClBkD,IAAAA,KAAK,GAAG,MAAMA,KAAd;AACH;;AAED,MAAIC,GAAG,CAACnD,MAAJ,GAAa,CAAjB,EAAoB;AAChBmD,IAAAA,GAAG,GAAG,MAAMA,GAAZ;AACH;;AAED,SAAO,CAACH,IAAD,EAAOE,KAAP,EAAcC,GAAd,EAAmBW,IAAnB,CAAwB,EAAxB,CAAP;AACH,CAjBD;;AAoBA,MAAMC,mBAAmB,GAAIrE,SAAD,IAAe;AACvCsE,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BvE,SAA9B;AACH,CAFD;;AAIA,eAAemB,cAAf;AACA,SAASqB,YAAT,EAAuBwB,OAAvB,EAAgCK,mBAAhC,EAAqDxE,YAArD","sourcesContent":["const getTitleData = (rawdata, date, movieName) => {\r\n    let titleData = [],\r\n        filtered = rawdata.filter( data => data.movieNm === movieName );\r\n    if ( filtered.length === 0 ) {\r\n        return null;\r\n    }\r\n    \r\n    filtered.forEach( data => {\r\n        const { rank, movieNm, movieCd, openDt, salesAmt, salesAcc, audiCnt, audiAcc, scrnCnt, showcnt, date } = data;\r\n        const tempObj = { rank, movieNm, movieCd, openDt, salesAmt, salesAcc, audiCnt, audiAcc, scrnCnt, showcnt, date };\r\n        titleData.push(tempObj);\r\n    });\r\n\r\n    return titleData;\r\n}\r\n\r\nconst getDefaultData = (data, date, isAttendance = true) => {\r\n    let defaultData = {\r\n        title: { date, daily: \"관객수\", cumulative: \"누적관객수\", theaters: \"상영관수\", trend: \"\" },\r\n        daily: [],\r\n        cumulative: [],\r\n        theaters: [],\r\n        trend: null,\r\n        rawdata: data,\r\n    }\r\n\r\n    let movieName = [],\r\n        targetMovies = [],\r\n        rawdata = data,\r\n        targetData = rawdata.filter( data => data.date === date ),\r\n        dataKey = isAttendance ? audiCnt : salesAmt;\r\n\r\n    // 1. daily,\r\n    for( let i = 0; i < 5; i++ ) {\r\n        let daily = { movieCode: `daily${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i][dataKey].toLocaleString() },\r\n            tempObject = { name: targetData[i].movieNm, data: [] };\r\n        \r\n        defaultData['daily'].push(daily);\r\n\r\n        movieName.push(tempObject);\r\n        targetMovies.push(targetData[i].movieNm);\r\n    }\r\n    dataKey = isAttendance ? audiAcc : salesAcc;\r\n    // 2. cumulative\r\n    targetData.sort((a, b) => b[dataKey] - a[dataKey]);\r\n    for ( let i = 0; i < 5; i++ ) {\r\n        let cumulative = { movieCode: `cumulative${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i][dataKey].toLocaleString() };\r\n        defaultData['cumulative'].push(cumulative);\r\n    }\r\n\r\n    // 3. theaters\r\n    targetData.sort((a, b) => b.scrnCnt - a.scrnCnt);\r\n    for( let i = 0; i < 5; i++ ) {\r\n        let theaters = { name: targetData[i].movieNm, y: targetData[i].scrnCnt };\r\n        defaultData['theaters'].push(theaters);\r\n    }\r\n\r\n    // 4. Trend\r\n    defaultData.trend = getTrendData(rawdata, defaultData.daily[0].movieCode, date);\r\n    defaultData.title.trend = defaultData.trend.title;\r\n   \r\n    return defaultData;\r\n}\r\n\r\nconst getTrendData = (rawdata, clicked, date) => {\r\n    let trendData = null,\r\n        categories = [],\r\n        series = [],\r\n        data = [],\r\n        filtered = null,\r\n        targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\r\n        dataType = clicked.replace(/[0-9]*/g, \"\"),\r\n        lastIndex = 0,\r\n        value = '',\r\n        title = '',\r\n        releaseDate = '';\r\n \r\n    // rawdata에서 clicked영화만 추출\r\n    filtered = rawdata.filter( rawdata => rawdata.movieCd === targetMovieCode );\r\n\r\n    // filter를 오늘까지 자름\r\n    lastIndex = filtered.findIndex( filtered => filtered.date === date );\r\n    value = dataType === \"daily\" ? \"audiCnt\" : \"audiAcc\";\r\n    title = dataType === \"daily\" ? `${filtered[0].movieNm} 일별 관객수` : `${filtered[0].movieNm} 일별 누적관객수`\r\n    releaseDate = filtered[0].openDt.replace(/-/g, '');\r\n\r\n    for(let i = 0; i <= lastIndex; i++) {\r\n        let formattedDate = getTrendDate(filtered[i].date),\r\n            //seriesData = ( filtered[i].date !== releaseDate ) ? {y: filtered[i][value] } :  { y: filtered[i][value], id: 'annotation' };\r\n            seriesData = filtered[i][value];\r\n\r\n        categories.push(formattedDate); // x축 날짜 데이터 삽입\r\n        data.push(seriesData);\r\n    }\r\n\r\n    // trend data구조에 맞게 처리\r\n    series.push({ name: filtered[0].movieNm, data });\r\n    trendData = { categories, series, title };\r\n\r\n    // return trend data\r\n    return trendData;\r\n}\r\n\r\nconst getTrendDate = (date) => {\r\n    // 1. date포맷 변경: \"20190101\" -> \"2019-01-01\" \r\n    let year = date.substr(0, 4),\r\n        month = date.substr(4, 2),\r\n        day = date.substr(6, 5),\r\n        formattedDate = `${year}-${month}-${day}`;\r\n    \r\n    // 2. Date 객체 생성\r\n    let dateObject = new Date(formattedDate);\r\n\r\n    // 3. getDay로 요일 생성\r\n    let weekday = dateObject.getDay();\r\n    let weekdayArray = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\r\n\r\n    // 4. 요일 + 달.일 형식으로 변경\r\n    let result = `${month}.${day} <br /> ${weekdayArray[weekday]}`;\r\n\r\n    return result;\r\n}\r\n\r\nconst getDate = (date) => {\r\n    //let date = new Date();\r\n    //date.setDate(date.getDate() + i);\r\n    let isNow = (date.getFullYear() === 2020),\r\n        month = '' + (date.getMonth() + 1),\r\n        day = '' + date.getDate(),\r\n        year = isNow ? date.getFullYear() - 1 : date.getFullYear();\r\n    \r\n    if (month.length < 2) {\r\n        month = '0' + month;\r\n    }\r\n\r\n    if (day.length < 2) {\r\n        day = '0' + day;\r\n    }\r\n\r\n    return [year, month, day].join('');\r\n}\r\n\r\n\r\nconst getSearchResultData = (movieName) => {\r\n    console.log('dataprocessing', movieName);\r\n}\r\n\r\nexport default getDefaultData;\r\nexport { getTrendData, getDate, getSearchResultData, getTitleData };"]},"metadata":{},"sourceType":"module"}