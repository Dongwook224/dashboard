{"ast":null,"code":"const getDefaultData = (data, date) => {\n  let defaultData = {\n    title: {\n      date: date,\n      daily: \"관객수\",\n      cumulative: \"누적관객수\",\n      theaters: \"상영관수\",\n      trend: \"\"\n    },\n    daily: [],\n    cumulative: [],\n    theaters: [],\n    trend: {\n      series: null,\n      categories: null\n    },\n    rawdata: data.data.data\n  };\n  let movieName = [],\n      dateArray = [],\n      targetMovies = [];\n  let rawdata = data.data.data,\n      targetData = rawdata.filter(data => data.date === date); // 1. daily,\n\n  for (let i = 0; i < 5; i++) {\n    let daily = {\n      movieCode: `daily${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiCnt\n    },\n        tempObject = {\n      name: targetData[i].movieNm,\n      data: []\n    };\n    defaultData['daily'].push(daily);\n    movieName.push(tempObject);\n    targetMovies.push(targetData[i].movieNm);\n  } // 2. cumulative\n\n\n  targetData.sort((a, b) => b.audiAcc - a.audiAcc);\n\n  for (let i = 0; i < 5; i++) {\n    let cumulative = {\n      movieCode: `cumulative${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiAcc\n    };\n    defaultData['cumulative'].push(cumulative);\n  } // 3. theaters\n\n\n  targetData.sort((a, b) => b.scrnCnt - a.scrnCnt);\n\n  for (let i = 0; i < 5; i++) {\n    //let theaters = { name: targetData[i].movieNm, y: targetData[i].scrnCnt };\n    let theaters = [targetData[i].movieNm, targetData[i].scrnCnt];\n    defaultData['theaters'].push(theaters);\n  } // 4. Trend\n\n\n  let trend = getNewTrendData();\n\n  for (let i = -1; i > -8; i--) {\n    let date = getYesterday(i);\n    dateArray.push(date);\n  }\n\n  let myData = [];\n  dateArray.forEach(targetDate => {\n    myData.push(rawdata.filter(data => data.date === targetDate));\n  });\n  let myArr = [].concat(...myData);\n  let tempArray = [];\n  targetMovies.forEach(movie => {\n    let filtered = myArr.filter(data => data.movieNm === movie),\n        tempObj = {\n      name: movie,\n      data: null\n    },\n        tempArr = [];\n\n    for (let i = 6; i >= 0; i--) {\n      let targetDate = dateArray[i],\n          tempElement = filtered.find(data => data.date === targetDate),\n          tempValue = null;\n\n      if (filtered[i] && filtered[i].date === targetDate) {\n        tempValue = filtered[i].audiCnt;\n      } else if (tempElement) {\n        tempValue = tempElement.audiCnt;\n      }\n\n      tempArr.push(tempValue);\n    }\n\n    tempObj.data = tempArr;\n    tempArray.push(tempObj);\n  });\n  dateArray.sort();\n  defaultData['trend']['series'] = tempArray;\n  defaultData['trend']['categories'] = dateArray;\n  return defaultData;\n};\n\nconst getNewTrendData = (rawdata, clicked) => {\n  let newTrendData = null,\n      categories = [],\n      series = [],\n      data = [],\n      filtered = null,\n      targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\n      dataType = clicked.replace(/[0-9]*/g, \"\"),\n      yesterday = getYesterday(-1),\n      lastIndex = 0,\n      value = ''; // clicked 처리\n  // rawdata에서 clicked영화만 추출\n\n  filtered = rawdata.filter(rawdata => rawdata.movieCd === targetMovieCode); // filter를 오늘까지 자름\n\n  lastIndex = filtered.findIndex(filtered => filtered.date === yesterday);\n  value = dataType === \"daily\" ? \"audiCnt\" : \"audiAcc\";\n\n  for (let i = 0; i <= lastIndex; i++) {\n    categories.push(filtered[i].date);\n    data.push(filtered[i][value]);\n  } // trend data구조에 맞게 처리\n\n\n  series.push({\n    name: filtered[0].movieNm,\n    data\n  });\n  newTrendData = {\n    categories,\n    series\n  }; // return trend data\n\n  return newTrendData;\n};\n\nconst getYesterday = i => {\n  let date = new Date();\n  date.setDate(date.getDate() + i);\n  let month = '' + (date.getMonth() + 1),\n      day = '' + date.getDate(),\n      year = date.getFullYear() - 1;\n\n  if (month.length < 2) {\n    month = '0' + month;\n  }\n\n  if (day.length < 2) {\n    day = '0' + day;\n  }\n\n  return [year, month, day].join('');\n};\n\nexport default getDefaultData;\nexport { getNewTrendData, getYesterday };","map":{"version":3,"sources":["D:/VisualStudioCode/dashboard/src/common/dataProcessing.js"],"names":["getDefaultData","data","date","defaultData","title","daily","cumulative","theaters","trend","series","categories","rawdata","movieName","dateArray","targetMovies","targetData","filter","i","movieCode","movieCd","movieNm","value","audiCnt","tempObject","name","push","sort","a","b","audiAcc","scrnCnt","getNewTrendData","getYesterday","myData","forEach","targetDate","myArr","concat","tempArray","movie","filtered","tempObj","tempArr","tempElement","find","tempValue","clicked","newTrendData","targetMovieCode","replace","dataType","yesterday","lastIndex","findIndex","Date","setDate","getDate","month","getMonth","day","year","getFullYear","length","join"],"mappings":"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","sourcesContent":["const getDefaultData = (data, date) => {\r\n    let defaultData = {\r\n        title: { date: date, daily: \"관객수\", cumulative: \"누적관객수\", theaters: \"상영관수\", trend: \"\" },\r\n        daily: [],\r\n        cumulative: [],\r\n        theaters: [],\r\n        trend: { series: null, categories: null },\r\n        rawdata: data.data.data,\r\n    }\r\n\r\n    let movieName = [],\r\n        dateArray = [],\r\n        targetMovies = [];\r\n\r\n    let rawdata = data.data.data,\r\n        targetData = rawdata.filter( data => data.date === date );\r\n   \r\n    // 1. daily,\r\n    for( let i = 0; i < 5; i++ ) {\r\n        let daily = { movieCode: `daily${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i].audiCnt },\r\n            tempObject = { name: targetData[i].movieNm, data: [] };\r\n        \r\n        defaultData['daily'].push(daily);\r\n\r\n        movieName.push(tempObject);\r\n        targetMovies.push(targetData[i].movieNm);\r\n    }\r\n    // 2. cumulative\r\n    targetData.sort((a, b) => b.audiAcc - a.audiAcc);\r\n    for ( let i = 0; i < 5; i++ ) {\r\n        let cumulative = { movieCode: `cumulative${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i].audiAcc };\r\n        defaultData['cumulative'].push(cumulative);\r\n    }\r\n\r\n    // 3. theaters\r\n    targetData.sort((a, b) => b.scrnCnt - a.scrnCnt);\r\n    for( let i = 0; i < 5; i++ ) {\r\n        //let theaters = { name: targetData[i].movieNm, y: targetData[i].scrnCnt };\r\n        let theaters = [ targetData[i].movieNm, targetData[i].scrnCnt ];\r\n        defaultData['theaters'].push(theaters);\r\n    }\r\n\r\n    // 4. Trend\r\n    let trend = getNewTrendData();\r\n    for(let i = -1; i > -8; i--) {\r\n        let date = getYesterday(i);\r\n        dateArray.push(date);\r\n    }\r\n\r\n    \r\n    let myData = [];\r\n    dateArray.forEach(targetDate => {\r\n        myData.push(rawdata.filter( data => data.date === targetDate));\r\n    });\r\n\r\n    let myArr = [].concat( ...myData );\r\n    \r\n    let tempArray = [];\r\n    targetMovies.forEach(movie => {\r\n        let filtered = myArr.filter(data => data.movieNm === movie),\r\n            tempObj = { name: movie, data: null },\r\n            tempArr = [];\r\n            \r\n        for(let i = 6; i >= 0; i--) {\r\n            let targetDate = dateArray[i],\r\n                tempElement = filtered.find( data => data.date === targetDate ),\r\n                tempValue = null;\r\n\r\n            if( filtered[i] && filtered[i].date === targetDate) {\r\n                tempValue = filtered[i].audiCnt;\r\n\r\n            } else if (tempElement) {\r\n                tempValue = tempElement.audiCnt;\r\n            } \r\n            tempArr.push(tempValue);\r\n        }\r\n\r\n        tempObj.data = tempArr;\r\n        tempArray.push(tempObj);\r\n    });\r\n    dateArray.sort();\r\n    \r\n    defaultData['trend']['series'] = tempArray;\r\n    defaultData['trend']['categories'] = dateArray;\r\n\r\n\r\n    return defaultData;\r\n}\r\n\r\nconst getNewTrendData = (rawdata, clicked) => {\r\n    let newTrendData = null,\r\n        categories = [],\r\n        series = [],\r\n        data = [],\r\n        filtered = null,\r\n        targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\r\n        dataType = clicked.replace(/[0-9]*/g, \"\"),\r\n        yesterday = getYesterday(-1),\r\n        lastIndex = 0,\r\n        value = '';\r\n\r\n    // clicked 처리\r\n    \r\n    // rawdata에서 clicked영화만 추출\r\n    filtered = rawdata.filter( rawdata => rawdata.movieCd === targetMovieCode );\r\n\r\n    // filter를 오늘까지 자름\r\n    lastIndex = filtered.findIndex( filtered => filtered.date === yesterday );\r\n    value = dataType === \"daily\" ? \"audiCnt\" : \"audiAcc\"\r\n    for(let i = 0; i <= lastIndex; i++) {\r\n        categories.push(filtered[i].date);\r\n        data.push(filtered[i][value]);\r\n    }\r\n\r\n    // trend data구조에 맞게 처리\r\n    series.push({ name: filtered[0].movieNm, data });\r\n    newTrendData = { categories, series };\r\n\r\n    // return trend data\r\n    return newTrendData;\r\n}\r\n\r\nconst getYesterday = (i) => {\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + i);\r\n\r\n    let month = '' + (date.getMonth() + 1),\r\n        day = '' + date.getDate(),\r\n        year = date.getFullYear() - 1;\r\n    \r\n    if (month.length < 2) {\r\n        month = '0' + month;\r\n    }\r\n\r\n    if (day.length < 2) {\r\n        day = '0' + day;\r\n    }\r\n\r\n    return [year, month, day].join('');\r\n}\r\n\r\nexport default getDefaultData;\r\nexport { getNewTrendData, getYesterday };"]},"metadata":{},"sourceType":"module"}