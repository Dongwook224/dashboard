{"ast":null,"code":"var _jsxFileName = \"D:\\\\VisualStudioCode\\\\dashboard\\\\src\\\\components\\\\Trend.js\";\nimport React from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nrequire('highcharts/modules/annotations')(Highcharts);\n\nconst Trend = props => {\n  const series = props.data ? props.data.series : null,\n        categories = props.data ? props.data.categories : null;\n  Highcharts.setOptions({\n    lang: {\n      thousandsSep: ','\n    }\n  });\n  const options = {\n    chart: {\n      type: 'area',\n      height: 241\n    },\n    title: {\n      text: undefined\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      categories: categories,\n      tickPositioner: function () {\n        const categoryLength = this.categories.length;\n        let positions = [];\n        console.log(categoryLength); //짝수 끝이안됨\n        //홀수 끝이 맞음\n\n        if (categoryLength <= 8) {\n          return;\n        } else if (categoryLength > 8 && categoryLength % 2 !== 0) {\n          for (let i = 0; i < categoryLength; i += 2) {\n            positions.push(i);\n          }\n\n          return positions;\n        } else if (categoryLength > 8 && categoryLength % 2 === 0) {\n          for (let i = 0; i < categoryLength; i += 2) {\n            if (i !== categoryLength - 1) {\n              positions.push(i);\n            } else {}\n          }\n\n          return positions;\n        }\n      }\n    },\n    yAxis: {\n      title: undefined,\n      min: 0,\n      labels: {\n        formatter: function () {\n          let value = this.value,\n              unit = '';\n\n          if (value >= 10000 && value < 100000000) {\n            //관객수: 만부터 1억까지\n            value = value / 10000;\n            unit = '만';\n          } else if (value >= 100000000 && value < 1000000000000) {\n            // 매출액: 1억부터 1조까지\n            value = value / 100000000;\n            unit = '억';\n          }\n\n          return value.toLocaleString() + unit;\n        }\n      }\n    },\n    plotOptions: {\n      series: {\n        color: '#5591f4',\n        marker: {\n          fillColor: '#FFFFFF',\n          lineWidth: 2,\n          lineColor: null\n        },\n        fillOpacity: 0.1\n      }\n    },\n    legend: {\n      enabled: false\n    },\n    tooltip: {\n      pointFormatter: function () {\n        return this.y.toLocaleString() + this.series.userOptions.tooltipUnit;\n      }\n    },\n    series: series // annotations: [{\n    //     labels: [{ \n    //         point: 'annotation',\n    //         text: '개봉일'\n    //     }]\n    // }],\n\n  };\n  return React.createElement(\"div\", {\n    className: \"bg-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"mt-3 border-bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, props && props.title, \" \", React.createElement(\"small\", {\n    className: \"ml-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, props.date))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(HighchartsReact, {\n    highcharts: Highcharts,\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })));\n};\n\nexport default Trend;","map":{"version":3,"sources":["D:/VisualStudioCode/dashboard/src/components/Trend.js"],"names":["React","Highcharts","HighchartsReact","require","Trend","props","series","data","categories","setOptions","lang","thousandsSep","options","chart","type","height","title","text","undefined","credits","enabled","xAxis","tickPositioner","categoryLength","length","positions","console","log","i","push","yAxis","min","labels","formatter","value","unit","toLocaleString","plotOptions","color","marker","fillColor","lineWidth","lineColor","fillOpacity","legend","tooltip","pointFormatter","y","userOptions","tooltipUnit","date"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nrequire('highcharts/modules/annotations')(Highcharts);\r\n\r\nconst Trend = (props) => {\r\n    const series = props.data ? props.data.series : null,\r\n          categories = props.data ? props.data.categories : null;\r\n   \r\n    Highcharts.setOptions({\r\n        lang: {\r\n            thousandsSep: ','\r\n        }\r\n    });\r\n          \r\n    const options = {\r\n        chart: {\r\n            type: 'area',\r\n            height: 241,\r\n        },\r\n\r\n        title: {\r\n            text: undefined\r\n        },\r\n        \r\n        credits: {\r\n            enabled: false\r\n        },\r\n\r\n        xAxis: {\r\n            categories: categories,\r\n            tickPositioner: function() {\r\n                \r\n                const categoryLength = this.categories.length;\r\n                let positions = [];\r\n                console.log(categoryLength);\r\n                //짝수 끝이안됨\r\n                //홀수 끝이 맞음\r\n                if( categoryLength <= 8 ) {\r\n                    return;\r\n                } else if ( categoryLength > 8 && categoryLength % 2 !== 0 ){\r\n                    for(let i = 0; i < categoryLength; i += 2) {\r\n                        positions.push(i);\r\n                    }\r\n                    return positions;\r\n                } else if ( categoryLength > 8 && categoryLength % 2 === 0 ){\r\n                    for(let i = 0; i < categoryLength; i += 2) {\r\n                        if( i !== categoryLength - 1) {\r\n                            positions.push(i);\r\n                        } else {\r\n\r\n                        }\r\n                        \r\n                    }\r\n                    return positions;\r\n                }\r\n            \r\n                \r\n            }\r\n        },\r\n\r\n        yAxis: {\r\n            title: undefined,\r\n            min: 0,\r\n            labels: {\r\n                formatter: function() {\r\n                    let value = this.value,\r\n                        unit = '';\r\n\r\n                    if( value >= 10000 && value < 100000000) { //관객수: 만부터 1억까지\r\n                        value = value / 10000;\r\n                        unit = '만';\r\n                    } else if ( value >= 100000000 && value < 1000000000000) { // 매출액: 1억부터 1조까지\r\n                        value = value / 100000000;\r\n                        unit = '억'\r\n                    }\r\n\r\n                    return value.toLocaleString() + unit;\r\n                }\r\n            }\r\n        },\r\n\r\n        plotOptions: {\r\n            series: {\r\n                color: '#5591f4',\r\n                marker: {\r\n                    fillColor: '#FFFFFF',\r\n                    lineWidth: 2,\r\n                    lineColor: null\r\n                },\r\n                fillOpacity: 0.1\r\n            }\r\n\r\n        },\r\n\r\n        legend: {\r\n            enabled: false\r\n        },\r\n\r\n        tooltip: {\r\n            pointFormatter: function() {\r\n                return this.y.toLocaleString() + this.series.userOptions.tooltipUnit;\r\n            }\r\n        },\r\n\r\n        series: series,\r\n\r\n        // annotations: [{\r\n        //     labels: [{ \r\n        //         point: 'annotation',\r\n        //         text: '개봉일'\r\n        //     }]\r\n        // }],\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-white\">\r\n            <div className=\"mt-3 border-bottom\">\r\n                 <h5>{props && props.title} <small className=\"ml-3\">{props.date}</small></h5>\r\n            </div>\r\n            <div>\r\n            <HighchartsReact \r\n              highcharts={Highcharts}\r\n              options={options}\r\n            />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Trend; "]},"metadata":{},"sourceType":"module"}