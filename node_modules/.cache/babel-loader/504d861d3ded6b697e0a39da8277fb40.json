{"ast":null,"code":"const getDefaultData = (data, date) => {\n  let defaultData = {\n    daily: [],\n    cumulative: [],\n    theaters: [],\n    trend: {\n      series: null,\n      categories: null\n    }\n  };\n  let movieName = [],\n      dateArray = [],\n      targetMovies = [];\n  let rawdata = data.data.data,\n      targetData = rawdata.filter(data => data.date === date); // daily, cumulative, theaters\n\n  for (let i = 0; i < 5; i++) {\n    let daily = {\n      id: i,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiCnt\n    },\n        cumulative = {\n      id: i,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiAcc\n    },\n        theaters = {\n      name: targetData[i].movieNm,\n      y: targetData[i].scrnCnt\n    },\n        tempObject = {\n      name: targetData[i].movieNm,\n      data: []\n    };\n    defaultData['daily'].push(daily);\n    defaultData['cumulative'].push(cumulative);\n    defaultData['theaters'].push(theaters);\n    movieName.push(tempObject);\n    targetMovies.push(targetData[i].movieNm);\n  }\n\n  for (let i = -1; i > -8; i--) {\n    let date = getYesterday(i);\n    dateArray.push(date);\n  } // 전체 데이터에서 날짜를 뽑는다\n\n\n  let myData = [];\n  dateArray.forEach(targetDate => {\n    myData.push(rawdata.filter(data => data.date === targetDate));\n  });\n  let myArr = [].concat(...myData);\n  let lineData = [];\n  let tempArray = [];\n  targetMovies.forEach(movie => {\n    let filtered = myArr.filter(data => data.movieNm === movie),\n        tempObj = {\n      name: movie,\n      data: null\n    },\n        tempArr = [];\n\n    for (let i = 6; i >= 0; i--) {\n      let targetDate = dateArray[i],\n          tempElement = filtered.find(data => data.date === targetDate),\n          tempValue = null;\n\n      if (filtered[i] && filtered[i].date === targetDate) {\n        tempValue = filtered[i].audiCnt;\n      } else if (tempElement) {\n        tempValue = tempElement.audiCnt;\n      }\n\n      tempArr.push(tempValue);\n    }\n\n    tempObj.data = tempArr;\n    tempArray.push(tempObj);\n  });\n  dateArray.sort();\n  processedData['trend']['series'] = tempArray;\n  processedData['trend']['categories'] = dateArray;\n  return defaultData;\n};\n\nconst getYesterday = i => {\n  let date = new Date();\n  date.setDate(date.getDate() + i);\n  let month = '' + (date.getMonth() + 1),\n      day = '' + date.getDate(),\n      year = date.getFullYear() - 1;\n\n  if (month.length < 2) {\n    month = '0' + month;\n  }\n\n  if (day.length < 2) {\n    day = '0' + day;\n  }\n\n  return [year, month, day].join('');\n};\n\nexport default getDefaultData;\nexport { getYesterday };","map":{"version":3,"sources":["D:/VisualStudioCode/dashboard/src/common/dataProcessing.js"],"names":["getDefaultData","data","date","defaultData","daily","cumulative","theaters","trend","series","categories","movieName","dateArray","targetMovies","rawdata","targetData","filter","i","id","movieNm","value","audiCnt","audiAcc","name","y","scrnCnt","tempObject","push","getYesterday","myData","forEach","targetDate","myArr","concat","lineData","tempArray","movie","filtered","tempObj","tempArr","tempElement","find","tempValue","sort","processedData","Date","setDate","getDate","month","getMonth","day","year","getFullYear","length","join"],"mappings":"AAAA,MAAMA,cAAc,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACnC,MAAIC,WAAW,GAAG;AACdC,IAAAA,KAAK,EAAE,EADO;AAEdC,IAAAA,UAAU,EAAE,EAFE;AAGdC,IAAAA,QAAQ,EAAE,EAHI;AAIdC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,IAAV;AAAgBC,MAAAA,UAAU,EAAE;AAA5B;AAJO,GAAlB;AAOA,MAAIC,SAAS,GAAG,EAAhB;AAAA,MACIC,SAAS,GAAG,EADhB;AAAA,MAEIC,YAAY,GAAG,EAFnB;AAIA,MAAIC,OAAO,GAAGZ,IAAI,CAACA,IAAL,CAAUA,IAAxB;AAAA,MACIa,UAAU,GAAGD,OAAO,CAACE,MAAR,CAAgBd,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcA,IAAtC,CADjB,CAZmC,CAenC;;AACA,OAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,QAAIZ,KAAK,GAAG;AAAEa,MAAAA,EAAE,EAAED,CAAN;AAASN,MAAAA,SAAS,EAAEI,UAAU,CAACE,CAAD,CAAV,CAAcE,OAAlC;AAA2CC,MAAAA,KAAK,EAAEL,UAAU,CAACE,CAAD,CAAV,CAAcI;AAAhE,KAAZ;AAAA,QACIf,UAAU,GAAG;AAAEY,MAAAA,EAAE,EAAED,CAAN;AAASN,MAAAA,SAAS,EAAEI,UAAU,CAACE,CAAD,CAAV,CAAcE,OAAlC;AAA2CC,MAAAA,KAAK,EAAEL,UAAU,CAACE,CAAD,CAAV,CAAcK;AAAhE,KADjB;AAAA,QAEIf,QAAQ,GAAG;AAAEgB,MAAAA,IAAI,EAAER,UAAU,CAACE,CAAD,CAAV,CAAcE,OAAtB;AAA+BK,MAAAA,CAAC,EAAET,UAAU,CAACE,CAAD,CAAV,CAAcQ;AAAhD,KAFf;AAAA,QAGIC,UAAU,GAAG;AAAEH,MAAAA,IAAI,EAAER,UAAU,CAACE,CAAD,CAAV,CAAcE,OAAtB;AAA+BjB,MAAAA,IAAI,EAAE;AAArC,KAHjB;AAKAE,IAAAA,WAAW,CAAC,OAAD,CAAX,CAAqBuB,IAArB,CAA0BtB,KAA1B;AACAD,IAAAA,WAAW,CAAC,YAAD,CAAX,CAA0BuB,IAA1B,CAA+BrB,UAA/B;AACAF,IAAAA,WAAW,CAAC,UAAD,CAAX,CAAwBuB,IAAxB,CAA6BpB,QAA7B;AACAI,IAAAA,SAAS,CAACgB,IAAV,CAAeD,UAAf;AACAb,IAAAA,YAAY,CAACc,IAAb,CAAkBZ,UAAU,CAACE,CAAD,CAAV,CAAcE,OAAhC;AACH;;AAED,OAAI,IAAIF,CAAC,GAAG,CAAC,CAAb,EAAgBA,CAAC,GAAG,CAAC,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,QAAId,IAAI,GAAGyB,YAAY,CAACX,CAAD,CAAvB;AACAL,IAAAA,SAAS,CAACe,IAAV,CAAexB,IAAf;AACH,GAhCkC,CAkCnC;;;AACA,MAAI0B,MAAM,GAAG,EAAb;AACAjB,EAAAA,SAAS,CAACkB,OAAV,CAAkBC,UAAU,IAAI;AAC5BF,IAAAA,MAAM,CAACF,IAAP,CAAYb,OAAO,CAACE,MAAR,CAAgBd,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc4B,UAAtC,CAAZ;AACH,GAFD;AAIA,MAAIC,KAAK,GAAG,GAAGC,MAAH,CAAW,GAAGJ,MAAd,CAAZ;AACA,MAAIK,QAAQ,GAAG,EAAf;AACA,MAAIC,SAAS,GAAG,EAAhB;AACAtB,EAAAA,YAAY,CAACiB,OAAb,CAAqBM,KAAK,IAAI;AAC1B,QAAIC,QAAQ,GAAGL,KAAK,CAAChB,MAAN,CAAad,IAAI,IAAIA,IAAI,CAACiB,OAAL,KAAiBiB,KAAtC,CAAf;AAAA,QACIE,OAAO,GAAG;AAAEf,MAAAA,IAAI,EAAEa,KAAR;AAAelC,MAAAA,IAAI,EAAE;AAArB,KADd;AAAA,QAEIqC,OAAO,GAAG,EAFd;;AAIA,SAAI,IAAItB,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,UAAIc,UAAU,GAAGnB,SAAS,CAACK,CAAD,CAA1B;AAAA,UACIuB,WAAW,GAAGH,QAAQ,CAACI,IAAT,CAAevC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc4B,UAArC,CADlB;AAAA,UAEIW,SAAS,GAAG,IAFhB;;AAIA,UAAIL,QAAQ,CAACpB,CAAD,CAAR,IAAeoB,QAAQ,CAACpB,CAAD,CAAR,CAAYd,IAAZ,KAAqB4B,UAAxC,EAAoD;AAChDW,QAAAA,SAAS,GAAGL,QAAQ,CAACpB,CAAD,CAAR,CAAYI,OAAxB;AAEH,OAHD,MAGO,IAAImB,WAAJ,EAAiB;AACpBE,QAAAA,SAAS,GAAGF,WAAW,CAACnB,OAAxB;AACH;;AACDkB,MAAAA,OAAO,CAACZ,IAAR,CAAae,SAAb;AACH;;AAEDJ,IAAAA,OAAO,CAACpC,IAAR,GAAeqC,OAAf;AACAJ,IAAAA,SAAS,CAACR,IAAV,CAAeW,OAAf;AACH,GArBD;AAsBA1B,EAAAA,SAAS,CAAC+B,IAAV;AAEAC,EAAAA,aAAa,CAAC,OAAD,CAAb,CAAuB,QAAvB,IAAmCT,SAAnC;AACAS,EAAAA,aAAa,CAAC,OAAD,CAAb,CAAuB,YAAvB,IAAuChC,SAAvC;AAGA,SAAOR,WAAP;AACH,CAxED;;AA0EA,MAAMwB,YAAY,GAAIX,CAAD,IAAO;AACxB,MAAId,IAAI,GAAG,IAAI0C,IAAJ,EAAX;AACA1C,EAAAA,IAAI,CAAC2C,OAAL,CAAa3C,IAAI,CAAC4C,OAAL,KAAiB9B,CAA9B;AAEA,MAAI+B,KAAK,GAAG,MAAM7C,IAAI,CAAC8C,QAAL,KAAkB,CAAxB,CAAZ;AAAA,MACIC,GAAG,GAAG,KAAK/C,IAAI,CAAC4C,OAAL,EADf;AAAA,MAEII,IAAI,GAAGhD,IAAI,CAACiD,WAAL,KAAqB,CAFhC;;AAIA,MAAIJ,KAAK,CAACK,MAAN,GAAe,CAAnB,EAAsB;AAClBL,IAAAA,KAAK,GAAG,MAAMA,KAAd;AACH;;AAED,MAAIE,GAAG,CAACG,MAAJ,GAAa,CAAjB,EAAoB;AAChBH,IAAAA,GAAG,GAAG,MAAMA,GAAZ;AACH;;AAED,SAAO,CAACC,IAAD,EAAOH,KAAP,EAAcE,GAAd,EAAmBI,IAAnB,CAAwB,EAAxB,CAAP;AACH,CAjBD;;AAmBA,eAAerD,cAAf;AACA,SAAS2B,YAAT","sourcesContent":["const getDefaultData = (data, date) => {\r\n    let defaultData = {\r\n        daily: [],\r\n        cumulative: [],\r\n        theaters: [],\r\n        trend: { series: null, categories: null }\r\n    }\r\n\r\n    let movieName = [],\r\n        dateArray = [],\r\n        targetMovies = [];\r\n\r\n    let rawdata = data.data.data,\r\n        targetData = rawdata.filter( data => data.date === date );\r\n    \r\n    // daily, cumulative, theaters\r\n    for( let i = 0; i < 5; i++) {\r\n        let daily = { id: i, movieName: targetData[i].movieNm, value: targetData[i].audiCnt },\r\n            cumulative = { id: i, movieName: targetData[i].movieNm, value: targetData[i].audiAcc },\r\n            theaters = { name: targetData[i].movieNm, y: targetData[i].scrnCnt },\r\n            tempObject = { name: targetData[i].movieNm, data: [] };\r\n        \r\n        defaultData['daily'].push(daily);\r\n        defaultData['cumulative'].push(cumulative);\r\n        defaultData['theaters'].push(theaters);\r\n        movieName.push(tempObject);\r\n        targetMovies.push(targetData[i].movieNm);\r\n    }\r\n\r\n    for(let i = -1; i > -8; i--) {\r\n        let date = getYesterday(i);\r\n        dateArray.push(date);\r\n    }\r\n\r\n    // 전체 데이터에서 날짜를 뽑는다\r\n    let myData = [];\r\n    dateArray.forEach(targetDate => {\r\n        myData.push(rawdata.filter( data => data.date === targetDate));\r\n    });\r\n\r\n    let myArr = [].concat( ...myData );\r\n    let lineData = [];\r\n    let tempArray = [];\r\n    targetMovies.forEach(movie => {\r\n        let filtered = myArr.filter(data => data.movieNm === movie),\r\n            tempObj = { name: movie, data: null },\r\n            tempArr = [];\r\n            \r\n        for(let i = 6; i >= 0; i--) {\r\n            let targetDate = dateArray[i],\r\n                tempElement = filtered.find( data => data.date === targetDate ),\r\n                tempValue = null;\r\n\r\n            if( filtered[i] && filtered[i].date === targetDate) {\r\n                tempValue = filtered[i].audiCnt;\r\n\r\n            } else if (tempElement) {\r\n                tempValue = tempElement.audiCnt;\r\n            } \r\n            tempArr.push(tempValue);\r\n        }\r\n\r\n        tempObj.data = tempArr;\r\n        tempArray.push(tempObj);\r\n    });\r\n    dateArray.sort();\r\n    \r\n    processedData['trend']['series'] = tempArray;\r\n    processedData['trend']['categories'] = dateArray;\r\n\r\n\r\n    return defaultData;\r\n}\r\n\r\nconst getYesterday = (i) => {\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + i);\r\n\r\n    let month = '' + (date.getMonth() + 1),\r\n        day = '' + date.getDate(),\r\n        year = date.getFullYear() - 1;\r\n    \r\n    if (month.length < 2) {\r\n        month = '0' + month;\r\n    }\r\n\r\n    if (day.length < 2) {\r\n        day = '0' + day;\r\n    }\r\n\r\n    return [year, month, day].join('');\r\n}\r\n\r\nexport default getDefaultData;\r\nexport { getYesterday };"]},"metadata":{},"sourceType":"module"}