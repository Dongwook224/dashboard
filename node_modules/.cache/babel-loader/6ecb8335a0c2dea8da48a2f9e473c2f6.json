{"ast":null,"code":"var _jsxFileName = \"D:\\\\VisualStudioCode\\\\dashboard\\\\src\\\\components\\\\dataProcessing.jsx\";\nimport React from 'react';\nimport data from './data';\nlet fossilFuelData = [],\n    hydroElectricData = [],\n    renewableEnergyData = [],\n    biomassData = [];\n\nlet dataProcessing = (yearFrom, yearTo) => {\n  let msg;\n\n  if (yearFrom <= yearTo) {\n    let coal = 0,\n        pliquids = 0,\n        pcoke = 0,\n        ngas = 0,\n        ogas = 0,\n        nuclear = 0,\n        chydroelectric = 0,\n        wind = 0,\n        solar = 0,\n        geothermal = 0,\n        biomass = 0,\n        wood = 0,\n        otherbio = 0;\n\n    for (let i = yearFrom; i - 1 < yearTo; i++) {\n      coal += data.coal[i];\n      pliquids += data.pliquids[i];\n      pcoke += data.pcoke[i];\n      ngas += data.ngas[i];\n      ogas += data.ogas[i];\n      nuclear += data.nuclear[i];\n      chydroelectric += data.chydroelectric[i];\n      wind += data.wind[i];\n      solar += data.solar[i];\n      geothermal += data.geothermal[i];\n      biomass += data.biomass[i];\n      wood += data.wood[i];\n      otherbio += data.otherbio[i];\n    }\n\n    fossilFuelData = [{\n      name: \"Coel\",\n      y: coal\n    }, {\n      name: \"Petroleum Liquids\",\n      y: pliquids\n    }, {\n      name: \"Petroleum Coke\",\n      y: pcoke\n    }, {\n      name: \"Natural gas\",\n      y: ngas\n    }, {\n      name: \"Other Gases\",\n      y: ogas\n    }];\n    hydroElectricData = [{\n      name: \"Nuclear\",\n      y: nuclear\n    }, {\n      name: \"Conventional Hydroelectric\",\n      y: chydroelectric\n    }];\n    biomassData = [{\n      name: \"Biomass\",\n      y: biomass\n    }, {\n      name: \"Wood\",\n      y: wood\n    }, {\n      name: \"Otherbio\",\n      y: otherbio\n    }];\n    renewableEnergyData = [{\n      name: \"Wind\",\n      y: wind\n    }, {\n      name: \"Solar\",\n      y: solar\n    }, {\n      name: \"Geothermal\",\n      y: geothermal\n    }];\n    msg = \"Select the range\";\n  } else {\n    msg = React.createElement(React.Fragment, null, \"Year \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"From\"), \" should be less or equal to year \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"To\"));\n  }\n\n  return msg;\n};\n\nexport default dataProcessing;\nexport { fossilFuelData, hydroElectricData, biomassData, renewableEnergyData };","map":{"version":3,"sources":["D:/VisualStudioCode/dashboard/src/components/dataProcessing.jsx"],"names":["React","data","fossilFuelData","hydroElectricData","renewableEnergyData","biomassData","dataProcessing","yearFrom","yearTo","msg","coal","pliquids","pcoke","ngas","ogas","nuclear","chydroelectric","wind","solar","geothermal","biomass","wood","otherbio","i","name","y"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport data from './data';\r\nlet fossilFuelData = [],\r\n    hydroElectricData = [],\r\n    renewableEnergyData = [],\r\n    biomassData = [];\r\n\r\nlet dataProcessing = (yearFrom, yearTo) => {\r\n    let msg;\r\n    if (yearFrom <= yearTo) {\r\n        let coal = 0,\r\n            pliquids = 0,\r\n            pcoke = 0,\r\n            ngas = 0,\r\n            ogas = 0,\r\n            nuclear = 0,\r\n            chydroelectric = 0,\r\n            wind = 0,\r\n            solar = 0,\r\n            geothermal = 0,\r\n            biomass = 0,\r\n            wood = 0,\r\n            otherbio = 0;\r\n\r\n        for (let i = yearFrom; i  - 1 < yearTo; i++) {\r\n            coal += data.coal[i];\r\n            pliquids += data.pliquids[i];\r\n            pcoke += data.pcoke[i];\r\n            ngas += data.ngas[i];\r\n            ogas += data.ogas[i];\r\n            nuclear += data.nuclear[i];\r\n            chydroelectric += data.chydroelectric[i];\r\n            wind += data.wind[i];\r\n            solar += data.solar[i];\r\n            geothermal += data.geothermal[i];\r\n            biomass += data.biomass[i];\r\n            wood += data.wood[i];\r\n            otherbio += data.otherbio[i];\r\n        }\r\n\r\n        fossilFuelData = [\r\n            { name: \"Coel\", y: coal },\r\n            { name: \"Petroleum Liquids\", y: pliquids },\r\n            { name: \"Petroleum Coke\", y: pcoke },\r\n            { name: \"Natural gas\", y: ngas },\r\n            { name: \"Other Gases\", y: ogas }\r\n        ];\r\n\r\n        hydroElectricData = [\r\n            { name: \"Nuclear\", y: nuclear },\r\n            { name: \"Conventional Hydroelectric\", y: chydroelectric }\r\n        ];\r\n\r\n        biomassData = [\r\n            { name: \"Biomass\", y: biomass },\r\n            { name: \"Wood\", y: wood },\r\n            { name: \"Otherbio\", y: otherbio }\r\n        ];\r\n\r\n        renewableEnergyData = [\r\n            { name: \"Wind\", y: wind },\r\n            { name: \"Solar\", y: solar },\r\n            { name: \"Geothermal\", y: geothermal }\r\n        ];\r\n        msg = \"Select the range\";\r\n    } else {\r\n        msg = (\r\n            <>\r\n                Year <b>From</b> should be less or equal to year <b>To</b>\r\n            </>\r\n        );\r\n    }\r\n    return msg;\r\n};\r\n\r\nexport default dataProcessing;\r\nexport { fossilFuelData, hydroElectricData, biomassData, renewableEnergyData };"]},"metadata":{},"sourceType":"module"}