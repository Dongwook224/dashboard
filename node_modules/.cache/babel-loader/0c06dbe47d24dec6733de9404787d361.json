{"ast":null,"code":"import * as moment from 'moment';\n\nconst getDefaultData = (data, date) => {\n  debugger;\n  let defaultData = {\n    title: {\n      date,\n      daily: \"관객수\",\n      cumulative: \"누적관객수\",\n      theaters: \"상영관수\",\n      trend: \"\"\n    },\n    daily: [],\n    cumulative: [],\n    theaters: [],\n    trend: null,\n    rawdata: data.data.data\n  };\n  let movieName = [],\n      dateArray = [],\n      targetMovies = [];\n  let rawdata = data.data.data,\n      targetData = rawdata.filter(data => data.date === date); // 1. daily,\n\n  for (let i = 0; i < 5; i++) {\n    let daily = {\n      movieCode: `daily${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiCnt\n    },\n        tempObject = {\n      name: targetData[i].movieNm,\n      data: []\n    };\n    defaultData['daily'].push(daily);\n    movieName.push(tempObject);\n    targetMovies.push(targetData[i].movieNm);\n  } // 2. cumulative\n\n\n  targetData.sort((a, b) => b.audiAcc - a.audiAcc);\n\n  for (let i = 0; i < 5; i++) {\n    let cumulative = {\n      movieCode: `cumulative${targetData[i].movieCd}`,\n      movieName: targetData[i].movieNm,\n      value: targetData[i].audiAcc\n    };\n    defaultData['cumulative'].push(cumulative);\n  } // 3. theaters\n\n\n  targetData.sort((a, b) => b.scrnCnt - a.scrnCnt);\n\n  for (let i = 0; i < 5; i++) {\n    let theaters = [targetData[i].movieNm, targetData[i].scrnCnt];\n    defaultData['theaters'].push(theaters);\n  } // 4. Trend\n\n\n  defaultData.trend = getNewTrendData(rawdata, defaultData.daily[0].movieCode);\n  defaultData.title.trend = `${defaultData.trend.series[0].name} 일별 관객 추이`;\n  return defaultData;\n};\n\nconst getNewTrendData = (rawdata, clicked) => {\n  let newTrendData = null,\n      categories = [],\n      series = [],\n      data = [],\n      filtered = null,\n      targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\n      dataType = clicked.replace(/[0-9]*/g, \"\"),\n      today = getDate(0),\n      lastIndex = 0,\n      value = '',\n      title = ''; // rawdata에서 clicked영화만 추출\n\n  filtered = rawdata.filter(rawdata => rawdata.movieCd === targetMovieCode); // filter를 오늘까지 자름\n\n  lastIndex = filtered.findIndex(filtered => filtered.date === today);\n  value = dataType === \"daily\" ? \"audiCnt\" : \"audiAcc\";\n\n  for (let i = 0; i <= lastIndex; i++) {\n    categories.push(filtered[i].date);\n    data.push(filtered[i][value]);\n  } // trend data구조에 맞게 처리\n\n\n  series.push({\n    name: filtered[0].movieNm,\n    data\n  });\n  title = `${series[0].name} 일별 관객추이`;\n  newTrendData = {\n    categories,\n    series,\n    title\n  }; // return trend data\n\n  return newTrendData;\n};\n\nconst getDate = i => {\n  let date = new Date();\n  date.setDate(date.getDate() + i);\n  let month = '' + (date.getMonth() + 1),\n      day = '' + date.getDate(),\n      year = date.getFullYear() - 1;\n\n  if (month.length < 2) {\n    month = '0' + month;\n  }\n\n  if (day.length < 2) {\n    day = '0' + day;\n  }\n\n  return [year, month, day].join('');\n};\n\nexport default getDefaultData;\nexport { getNewTrendData, getDate };","map":{"version":3,"sources":["D:/VisualStudioCode/dashboard/src/common/dataProcessing.js"],"names":["moment","getDefaultData","data","date","defaultData","title","daily","cumulative","theaters","trend","rawdata","movieName","dateArray","targetMovies","targetData","filter","i","movieCode","movieCd","movieNm","value","audiCnt","tempObject","name","push","sort","a","b","audiAcc","scrnCnt","getNewTrendData","series","clicked","newTrendData","categories","filtered","targetMovieCode","replace","dataType","today","getDate","lastIndex","findIndex","Date","setDate","month","getMonth","day","year","getFullYear","length","join"],"mappings":"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","sourcesContent":["import * as moment from 'moment';\r\nconst getDefaultData = (data, date) => {\r\n    debugger;\r\n    let defaultData = {\r\n        title: { date, daily: \"관객수\", cumulative: \"누적관객수\", theaters: \"상영관수\", trend: \"\" },\r\n        daily: [],\r\n        cumulative: [],\r\n        theaters: [],\r\n        trend: null,\r\n        rawdata: data.data.data,\r\n    }\r\n\r\n    let movieName = [],\r\n        dateArray = [],\r\n        targetMovies = [];\r\n\r\n    let rawdata = data.data.data,\r\n        targetData = rawdata.filter( data => data.date === date );\r\n   \r\n    // 1. daily,\r\n    for( let i = 0; i < 5; i++ ) {\r\n        let daily = { movieCode: `daily${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i].audiCnt },\r\n            tempObject = { name: targetData[i].movieNm, data: [] };\r\n        \r\n        defaultData['daily'].push(daily);\r\n\r\n        movieName.push(tempObject);\r\n        targetMovies.push(targetData[i].movieNm);\r\n    }\r\n\r\n    // 2. cumulative\r\n    targetData.sort((a, b) => b.audiAcc - a.audiAcc);\r\n    for ( let i = 0; i < 5; i++ ) {\r\n        let cumulative = { movieCode: `cumulative${targetData[i].movieCd}`, movieName: targetData[i].movieNm, value: targetData[i].audiAcc };\r\n        defaultData['cumulative'].push(cumulative);\r\n    }\r\n\r\n    // 3. theaters\r\n    targetData.sort((a, b) => b.scrnCnt - a.scrnCnt);\r\n    for( let i = 0; i < 5; i++ ) {\r\n        let theaters = [ targetData[i].movieNm, targetData[i].scrnCnt ];\r\n        defaultData['theaters'].push(theaters);\r\n    }\r\n\r\n    // 4. Trend\r\n    defaultData.trend = getNewTrendData(rawdata, defaultData.daily[0].movieCode);\r\n    defaultData.title.trend = `${defaultData.trend.series[0].name} 일별 관객 추이`;\r\n   \r\n    return defaultData;\r\n}\r\n\r\nconst getNewTrendData = (rawdata, clicked) => {\r\n    let newTrendData = null,\r\n        categories = [],\r\n        series = [],\r\n        data = [],\r\n        filtered = null,\r\n        targetMovieCode = clicked.replace(/daily|cumulative/g, \"\"),\r\n        dataType = clicked.replace(/[0-9]*/g, \"\"),\r\n        today = getDate(0),\r\n        lastIndex = 0,\r\n        value = '',\r\n        title = '';\r\n \r\n    // rawdata에서 clicked영화만 추출\r\n    filtered = rawdata.filter( rawdata => rawdata.movieCd === targetMovieCode );\r\n\r\n    // filter를 오늘까지 자름\r\n    lastIndex = filtered.findIndex( filtered => filtered.date === today );\r\n    value = dataType === \"daily\" ? \"audiCnt\" : \"audiAcc\"\r\n    for(let i = 0; i <= lastIndex; i++) {\r\n        categories.push(filtered[i].date);\r\n        data.push(filtered[i][value]);\r\n    }\r\n\r\n    // trend data구조에 맞게 처리\r\n    series.push({ name: filtered[0].movieNm, data });\r\n    title = `${series[0].name} 일별 관객추이`;\r\n    newTrendData = { categories, series, title };\r\n\r\n    // return trend data\r\n    return newTrendData;\r\n}\r\n\r\nconst getDate = (i) => {\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + i);\r\n\r\n    let month = '' + (date.getMonth() + 1),\r\n        day = '' + date.getDate(),\r\n        year = date.getFullYear() - 1;\r\n    \r\n    if (month.length < 2) {\r\n        month = '0' + month;\r\n    }\r\n\r\n    if (day.length < 2) {\r\n        day = '0' + day;\r\n    }\r\n\r\n    return [year, month, day].join('');\r\n}\r\n\r\nexport default getDefaultData;\r\nexport { getNewTrendData, getDate };"]},"metadata":{},"sourceType":"module"}